/*
 * generated by Xtext 2.10.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package dsl.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dsl.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import dsl.xtext.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDSL
entryRuleDSL
:
{ before(grammarAccess.getDSLRule()); }
	 ruleDSL
{ after(grammarAccess.getDSLRule()); } 
	 EOF 
;

// Rule DSL
ruleDSL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDSLAccess().getGroup()); }
		(rule__DSL__Group__0)
		{ after(grammarAccess.getDSLAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSyntax
entryRuleSyntax
:
{ before(grammarAccess.getSyntaxRule()); }
	 ruleSyntax
{ after(grammarAccess.getSyntaxRule()); } 
	 EOF 
;

// Rule Syntax
ruleSyntax 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSyntaxAccess().getValueAssignment()); }
		(rule__Syntax__ValueAssignment)
		{ after(grammarAccess.getSyntaxAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBehavior
entryRuleBehavior
:
{ before(grammarAccess.getBehaviorRule()); }
	 ruleBehavior
{ after(grammarAccess.getBehaviorRule()); } 
	 EOF 
;

// Rule Behavior
ruleBehavior 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBehaviorAccess().getValueAssignment()); }
		(rule__Behavior__ValueAssignment)
		{ after(grammarAccess.getBehaviorAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group__0__Impl
	rule__DSL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getSyntaxKeyword_0()); }
	'syntax'
	{ after(grammarAccess.getDSLAccess().getSyntaxKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group__1__Impl
	rule__DSL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getDSLAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group__2__Impl
	rule__DSL__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getSyntaxesAssignment_2()); }
	(rule__DSL__SyntaxesAssignment_2)
	{ after(grammarAccess.getDSLAccess().getSyntaxesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group__3__Impl
	rule__DSL__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getGroup_3()); }
	(rule__DSL__Group_3__0)*
	{ after(grammarAccess.getDSLAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group__4__Impl
	rule__DSL__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getBehaviorKeyword_4()); }
	'behavior'
	{ after(grammarAccess.getDSLAccess().getBehaviorKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group__5__Impl
	rule__DSL__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getEqualsSignKeyword_5()); }
	'='
	{ after(grammarAccess.getDSLAccess().getEqualsSignKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group__6__Impl
	rule__DSL__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getBehavioursAssignment_6()); }
	(rule__DSL__BehavioursAssignment_6)
	{ after(grammarAccess.getDSLAccess().getBehavioursAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getGroup_7()); }
	(rule__DSL__Group_7__0)*
	{ after(grammarAccess.getDSLAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DSL__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group_3__0__Impl
	rule__DSL__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getDSLAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getSyntaxesAssignment_3_1()); }
	(rule__DSL__SyntaxesAssignment_3_1)
	{ after(grammarAccess.getDSLAccess().getSyntaxesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DSL__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group_7__0__Impl
	rule__DSL__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getCommaKeyword_7_0()); }
	','
	{ after(grammarAccess.getDSLAccess().getCommaKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getBehavioursAssignment_7_1()); }
	(rule__DSL__BehavioursAssignment_7_1)
	{ after(grammarAccess.getDSLAccess().getBehavioursAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DSL__SyntaxesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDSLAccess().getSyntaxesSyntaxParserRuleCall_2_0()); }
		ruleSyntax
		{ after(grammarAccess.getDSLAccess().getSyntaxesSyntaxParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__SyntaxesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDSLAccess().getSyntaxesSyntaxParserRuleCall_3_1_0()); }
		ruleSyntax
		{ after(grammarAccess.getDSLAccess().getSyntaxesSyntaxParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__BehavioursAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDSLAccess().getBehavioursBehaviorParserRuleCall_6_0()); }
		ruleBehavior
		{ after(grammarAccess.getDSLAccess().getBehavioursBehaviorParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__BehavioursAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDSLAccess().getBehavioursBehaviorParserRuleCall_7_1_0()); }
		ruleBehavior
		{ after(grammarAccess.getDSLAccess().getBehavioursBehaviorParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Syntax__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSyntaxAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getSyntaxAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBehaviorAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getBehaviorAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
