/*
 * generated by Xtext 2.10.0
 */
package dsl.xtext.validation

import dsl.xtext.dsl.DslPackage
import dsl.xtext.dsl.Syntax
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.EcorePackage
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.xtext.validation.Check
import java.util.List
import ale.xtext.ale.AlePackage
import dsl.xtext.dsl.Behavior

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DslValidator extends DslTypeValidator {

//	public static val INVALID_NAME = 'invalidName'
//
	String BEHAVIOURS_URI_NOT_FOUND = "behaviours.uri.not.found"

	
	override List<EPackage> getEPackages() {
		newArrayList(DslPackage.eINSTANCE, AlePackage.eINSTANCE)
	}

	@Check
	def checkValidSyntax(Syntax syntax) {
		if (!EPackage.Registry.INSTANCE.containsKey(EcorePackage.eNS_URI))
			EPackage.Registry.INSTANCE.put(EcorePackage.eNS_URI, EcorePackage.eINSTANCE)

		Resource.Factory.Registry.INSTANCE.extensionToFactoryMap.put("ecore", new XMIResourceFactoryImpl)

		val rs = new ResourceSetImpl

		if (rs.packageRegistry.getEPackage(syntax.value) == null) {
			error(
				"Package URI can't be resolve",
				syntax,
				DslPackage.Literals.SYNTAX__VALUE,
				BEHAVIOURS_URI_NOT_FOUND
			)
		}
	}
	
	@Check
	def checkValidBehavior(Behavior behavior) {
	Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("dsl", new XMIResourceFactoryImpl());
		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("ale", new XMIResourceFactoryImpl());		
	}

}
