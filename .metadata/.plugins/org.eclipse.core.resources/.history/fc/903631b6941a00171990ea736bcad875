package ale.compiler

import ale.xtext.ale.OpenClass
import ale.xtext.ale.Root
import fr.inria.diverse.objectalgebragenerator.GenerateAlgebra
import java.io.FileWriter
import java.io.IOException
import org.eclipse.core.resources.IProject
import org.eclipse.emf.ecore.EClass

class GenerateOperation {
//	
//	private def static dispatch EOperation getOperation(Implementation implementation) {
//		implementation.operationRef
//	}
//	private def static dispatch EOperation getOperation(Method method) {
//		method.operationDef
//	}
//	def dispatch generate(EClass clazz, IProject project, NewClass openClass) {
//	}

	def generate(EClass clazz, IProject project, OpenClass openClass, String dslName) {

		val fileContent = new GenerateAlgebra().generateOperation(clazz, openClass, dslName)

		val behavior = openClass.eContainer as Root
		val directoryAlgebra = project.getLocation().append("src").append(dslName).append("algebra").append(
			"operation");
		directoryAlgebra.toFile().mkdirs();
		
		val fileName = behavior.name.toFirstUpper + clazz.name.toFirstUpper+"Operation";
		val fileJavaAlgebra = directoryAlgebra.append(fileName).addFileExtension("java");

		try {
			val FileWriter fileWriter = new FileWriter(fileJavaAlgebra.toFile());
			fileWriter.write(fileContent);
			fileWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	
}
