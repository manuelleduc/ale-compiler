package ale.compiler

import ale.xtext.ale.Class
import ale.xtext.ale.OpenClass
import ale.xtext.ale.Root
import java.io.FileWriter
import java.io.IOException
import org.eclipse.core.resources.IProject
import org.eclipse.emf.ecore.ETypedElement
import ale.xtext.ale.NewClass
import fr.inria.diverse.objectalgebragenerator.GenerateAlgebra

class GenerateOperation {
//	
//	private def static dispatch EOperation getOperation(Implementation implementation) {
//		implementation.operationRef
//	}
//	private def static dispatch EOperation getOperation(Method method) {
//		method.operationDef
//	}
	def dispatch generate(NewClass clazz, IProject project) {
	}

	def dispatch generate(OpenClass clazz, IProject project) {

		val behavior = clazz.eContainer as Root
		val fileContent = new GenerateAlgebra().generateOperation(clazz)

		val directoryAlgebra = project.getLocation().append("src").append(behavior.name).append("algebra").append(
			"operation");
		directoryAlgebra.toFile().mkdirs();
		val fileJavaAlgebra = directoryAlgebra.append(clazz.name).addFileExtension("java");

		try {
			val FileWriter fileWriter = new FileWriter(fileJavaAlgebra.toFile());
			fileWriter.write(fileContent);
			fileWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	def static String toJavaType(ETypedElement opp) {
		if (opp.EGenericType != null) {
			val type = opp.
				EType
			return '''«type.instanceClassName»«FOR t : opp.EGenericType.ETypeArguments BEFORE '<' SEPARATOR ', ' AFTER '>'»«t.EClassifier.instanceClassName»«ENDFOR»'''
		} else {
			return '''«opp.EType.instanceClassName»'''
		}
	}

	def static String toJavaType(Class clazz) {
		val behavior = clazz.eContainer as Root
		'''«behavior.name».algebra.operation.«behavior.name.toFirstUpper»«clazz.name.toFirstUpper»Operation'''
	}
}
