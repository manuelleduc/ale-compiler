/**
 * generated by Xtext 2.10.0
 */
package ale.xtext.generator;

import ale.xtext.AleType;
import ale.xtext.ale.Root;
import com.google.common.collect.Iterators;
import com.google.inject.Inject;
import java.util.Iterator;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AleGenerator extends AbstractGenerator {
  @Inject
  private AleType semantics;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<Root> _filter = Iterators.<Root>filter(_allContents, Root.class);
    final Function1<Root, String> _function = (Root it) -> {
      return it.getName();
    };
    Iterator<String> _map = IteratorExtensions.<Root, String>map(_filter, _function);
    String _join = IteratorExtensions.join(_map, ", ");
    String _plus = ("" + _join);
    fsa.generateFile("debug.txt", _plus);
  }
}
