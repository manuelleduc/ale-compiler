/*
 * generated by Xtext 2.10.0
 */
grammar InternalAle;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ale.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ale.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ale.xtext.services.AleGrammarAccess;

}

@parser::members {

 	private AleGrammarAccess grammarAccess;

    public InternalAleParser(TokenStream input, AleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Root";
   	}

   	@Override
   	protected AleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	iv_ruleRoot=ruleRoot
	{ $current=$iv_ruleRoot.current; }
	EOF;

// Rule Root
ruleRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='behavior'
		{
			newLeafNode(otherlv_0, grammarAccess.getRootAccess().getBehaviorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRootAccess().getNameQualifiedParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualified
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"ale.xtext.Ale.Qualified");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRootAccess().getSemicolonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRootAccess().getImportsImportParserRuleCall_3_0());
				}
				lv_imports_3_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootRule());
					}
					add(
						$current,
						"imports",
						lv_imports_3_0,
						"ale.xtext.Ale.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRootAccess().getClassesAleClassParserRuleCall_4_0());
				}
				lv_classes_4_0=ruleAleClass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootRule());
					}
					add(
						$current,
						"classes",
						lv_classes_4_0,
						"ale.xtext.Ale.AleClass");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getImportAccess().getRefRootCrossReference_1_0());
				}
			)
		)
		otherlv_2='as'
		{
			newLeafNode(otherlv_2, grammarAccess.getImportAccess().getAsKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getImportAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getImportAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleAleClass
entryRuleAleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAleClassRule()); }
	iv_ruleAleClass=ruleAleClass
	{ $current=$iv_ruleAleClass.current; }
	EOF;

// Rule AleClass
ruleAleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAleClassAccess().getOpenClassParserRuleCall_0());
		}
		this_OpenClass_0=ruleOpenClass
		{
			$current = $this_OpenClass_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAleClassAccess().getNewClassParserRuleCall_1());
		}
		this_NewClass_1=ruleNewClass
		{
			$current = $this_NewClass_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTag
entryRuleTag returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	iv_ruleTag=ruleTag
	{ $current=$iv_ruleTag.current.getText(); }
	EOF;

// Rule Tag
ruleTag returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='@'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTagAccess().getCommercialAtKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getTagAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleOpenClass
entryRuleOpenClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpenClassRule()); }
	iv_ruleOpenClass=ruleOpenClass
	{ $current=$iv_ruleOpenClass.current; }
	EOF;

// Rule OpenClass
ruleOpenClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOpenClassAccess().getOpenClassAction_0(),
					$current);
			}
		)
		otherlv_1='open'
		{
			newLeafNode(otherlv_1, grammarAccess.getOpenClassAccess().getOpenKeyword_1());
		}
		otherlv_2='class'
		{
			newLeafNode(otherlv_2, grammarAccess.getOpenClassAccess().getClassKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getOpenClassAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpenClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4='extends'
			{
				newLeafNode(otherlv_4, grammarAccess.getOpenClassAccess().getExtendsKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOpenClassAccess().getSuperClassQualifiedParserRuleCall_4_1_0());
					}
					lv_superClass_5_0=ruleQualified
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOpenClassRule());
						}
						add(
							$current,
							"superClass",
							lv_superClass_5_0,
							"ale.xtext.Ale.Qualified");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getOpenClassAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOpenClassAccess().getSuperClassQualifiedParserRuleCall_4_2_1_0());
						}
						lv_superClass_7_0=ruleQualified
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOpenClassRule());
							}
							add(
								$current,
								"superClass",
								lv_superClass_7_0,
								"ale.xtext.Ale.Qualified");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_8='{'
			{
				newLeafNode(otherlv_8, grammarAccess.getOpenClassAccess().getLeftCurlyBracketKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOpenClassAccess().getFieldsFieldParserRuleCall_5_1_0());
					}
					lv_fields_9_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOpenClassRule());
						}
						add(
							$current,
							"fields",
							lv_fields_9_0,
							"ale.xtext.Ale.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getOpenClassAccess().getMethodsMethodParserRuleCall_5_2_0());
					}
					lv_methods_10_0=ruleMethod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOpenClassRule());
						}
						add(
							$current,
							"methods",
							lv_methods_10_0,
							"ale.xtext.Ale.Method");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getOpenClassAccess().getRightCurlyBracketKeyword_5_3());
			}
		)
	)
;

// Entry rule entryRuleNewClass
entryRuleNewClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNewClassRule()); }
	iv_ruleNewClass=ruleNewClass
	{ $current=$iv_ruleNewClass.current; }
	EOF;

// Rule NewClass
ruleNewClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNewClassAccess().getNewClassAction_0(),
					$current);
			}
		)
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getNewClassAccess().getClassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getNewClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNewClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getNewClassAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNewClassAccess().getSuperClassQualifiedParserRuleCall_3_1_0());
					}
					lv_superClass_4_0=ruleQualified
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNewClassRule());
						}
						add(
							$current,
							"superClass",
							lv_superClass_4_0,
							"ale.xtext.Ale.Qualified");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getNewClassAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNewClassAccess().getSuperClassQualifiedParserRuleCall_3_2_1_0());
						}
						lv_superClass_6_0=ruleQualified
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNewClassRule());
							}
							add(
								$current,
								"superClass",
								lv_superClass_6_0,
								"ale.xtext.Ale.Qualified");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getNewClassAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNewClassAccess().getFieldsFieldParserRuleCall_4_1_0());
					}
					lv_fields_8_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNewClassRule());
						}
						add(
							$current,
							"fields",
							lv_fields_8_0,
							"ale.xtext.Ale.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getNewClassAccess().getMethodsMethodParserRuleCall_4_2_0());
					}
					lv_methods_9_0=ruleMethod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNewClassRule());
						}
						add(
							$current,
							"methods",
							lv_methods_9_0,
							"ale.xtext.Ale.Method");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getNewClassAccess().getRightCurlyBracketKeyword_4_3());
			}
		)
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFieldAccess().getPrimitiveFieldAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_0_1_0());
					}
					lv_type_1_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"ale.xtext.Ale.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getFieldAccess().getSemicolonKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFieldAccess().getRefFieldAction_1_0(),
						$current);
				}
			)
			otherlv_5='ref'
			{
				newLeafNode(otherlv_5, grammarAccess.getFieldAccess().getRefKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_1_2_0());
					}
					lv_type_6_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						set(
							$current,
							"type",
							lv_type_6_0,
							"ale.xtext.Ale.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_name_7_0=RULE_ID
					{
						newLeafNode(lv_name_7_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_7_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_8='rev'
				{
					newLeafNode(otherlv_8, grammarAccess.getFieldAccess().getRevKeyword_1_4_0());
				}
				(
					(
						lv_reverse_9_0=RULE_ID
						{
							newLeafNode(lv_reverse_9_0, grammarAccess.getFieldAccess().getReverseIDTerminalRuleCall_1_4_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFieldRule());
							}
							setWithLastConsumed(
								$current,
								"reverse",
								lv_reverse_9_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)?
			otherlv_10=';'
			{
				newLeafNode(otherlv_10, grammarAccess.getFieldAccess().getSemicolonKeyword_1_5());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFieldAccess().getContainmentFieldAction_2_0(),
						$current);
				}
			)
			otherlv_12='cont'
			{
				newLeafNode(otherlv_12, grammarAccess.getFieldAccess().getContKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_2_2_0());
					}
					lv_type_13_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldRule());
						}
						set(
							$current,
							"type",
							lv_type_13_0,
							"ale.xtext.Ale.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_name_14_0=RULE_ID
					{
						newLeafNode(lv_name_14_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_2_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_14_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_15=';'
			{
				newLeafNode(otherlv_15, grammarAccess.getFieldAccess().getSemicolonKeyword_2_4());
			}
		)
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMethodAccess().getDefMethodParserRuleCall_0());
		}
		this_DefMethod_0=ruleDefMethod
		{
			$current = $this_DefMethod_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMethodAccess().getOverrideMethodParserRuleCall_1());
		}
		this_OverrideMethod_1=ruleOverrideMethod
		{
			$current = $this_OverrideMethod_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefMethod
entryRuleDefMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefMethodRule()); }
	iv_ruleDefMethod=ruleDefMethod
	{ $current=$iv_ruleDefMethod.current; }
	EOF;

// Rule DefMethod
ruleDefMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDefMethodAccess().getTagsTagParserRuleCall_0_0());
				}
				lv_tags_0_0=ruleTag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefMethodRule());
					}
					add(
						$current,
						"tags",
						lv_tags_0_0,
						"ale.xtext.Ale.Tag");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='def'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefMethodAccess().getDefKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDefMethodAccess().getTypeTypeParserRuleCall_2_0_0());
					}
					lv_type_2_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefMethodRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"ale.xtext.Ale.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			otherlv_3='void'
			{
				newLeafNode(otherlv_3, grammarAccess.getDefMethodAccess().getVoidKeyword_2_1());
			}
		)
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getDefMethodAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefMethodRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getDefMethodAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getDefMethodAccess().getParamsParamParserRuleCall_4_1_0_0());
						}
						lv_params_6_0=ruleParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDefMethodRule());
							}
							add(
								$current,
								"params",
								lv_params_6_0,
								"ale.xtext.Ale.Param");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_7=','
					{
						newLeafNode(otherlv_7, grammarAccess.getDefMethodAccess().getCommaKeyword_4_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDefMethodAccess().getParamsParamParserRuleCall_4_1_1_1_0());
							}
							lv_params_8_0=ruleParam
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDefMethodRule());
								}
								add(
									$current,
									"params",
									lv_params_8_0,
									"ale.xtext.Ale.Param");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getDefMethodAccess().getRightParenthesisKeyword_4_2());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDefMethodAccess().getBlockBlockParserRuleCall_5_0());
				}
				lv_block_10_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefMethodRule());
					}
					set(
						$current,
						"block",
						lv_block_10_0,
						"ale.xtext.Ale.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOverrideMethod
entryRuleOverrideMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOverrideMethodRule()); }
	iv_ruleOverrideMethod=ruleOverrideMethod
	{ $current=$iv_ruleOverrideMethod.current; }
	EOF;

// Rule OverrideMethod
ruleOverrideMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOverrideMethodAccess().getTagsTagParserRuleCall_0_0());
				}
				lv_tags_0_0=ruleTag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOverrideMethodRule());
					}
					add(
						$current,
						"tags",
						lv_tags_0_0,
						"ale.xtext.Ale.Tag");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='override'
		{
			newLeafNode(otherlv_1, grammarAccess.getOverrideMethodAccess().getOverrideKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOverrideMethodAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOverrideMethodRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"ale.xtext.Ale.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getOverrideMethodAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOverrideMethodRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getOverrideMethodAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getOverrideMethodAccess().getParamsParamParserRuleCall_4_1_0_0());
						}
						lv_params_5_0=ruleParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOverrideMethodRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"ale.xtext.Ale.Param");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getOverrideMethodAccess().getCommaKeyword_4_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getOverrideMethodAccess().getParamsParamParserRuleCall_4_1_1_1_0());
							}
							lv_params_7_0=ruleParam
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getOverrideMethodRule());
								}
								add(
									$current,
									"params",
									lv_params_7_0,
									"ale.xtext.Ale.Param");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getOverrideMethodAccess().getRightParenthesisKeyword_4_2());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOverrideMethodAccess().getBlockBlockParserRuleCall_5_0());
				}
				lv_block_9_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOverrideMethodRule());
					}
					set(
						$current,
						"block",
						lv_block_9_0,
						"ale.xtext.Ale.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getVarAssignParserRuleCall_0_0());
			}
			this_VarAssign_0=ruleVarAssign
			{
				$current = $this_VarAssign_0.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getSemicolonKeyword_0_1());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForLoopParserRuleCall_1());
		}
		this_ForLoop_2=ruleForLoop
		{
			$current = $this_ForLoop_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_2());
		}
		this_IfStatement_3=ruleIfStatement
		{
			$current = $this_IfStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_3());
		}
		this_WhileStatement_4=ruleWhileStatement
		{
			$current = $this_WhileStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getLetStatementParserRuleCall_4_0());
			}
			this_LetStatement_5=ruleLetStatement
			{
				$current = $this_LetStatement_5.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getStatementAccess().getSemicolonKeyword_4_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_5_0());
			}
			this_ReturnStatement_7=ruleReturnStatement
			{
				$current = $this_ReturnStatement_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getStatementAccess().getSemicolonKeyword_5_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_6_0());
			}
			this_Expression_9=ruleExpression
			{
				$current = $this_Expression_9.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_10=';'
			{
				newLeafNode(otherlv_10, grammarAccess.getStatementAccess().getSemicolonKeyword_6_1());
			}
		)
	)
;

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	iv_ruleReturnStatement=ruleReturnStatement
	{ $current=$iv_ruleReturnStatement.current; }
	EOF;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnStatementAccess().getReturnedExpressionParserRuleCall_2_0());
				}
				lv_returned_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStatementRule());
					}
					set(
						$current,
						"returned",
						lv_returned_2_0,
						"ale.xtext.Ale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLetStatement
entryRuleLetStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLetStatementRule()); }
	iv_ruleLetStatement=ruleLetStatement
	{ $current=$iv_ruleLetStatement.current; }
	EOF;

// Rule LetStatement
ruleLetStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLetStatementAccess().getLetStatementAction_0(),
					$current);
			}
		)
		otherlv_1='let'
		{
			newLeafNode(otherlv_1, grammarAccess.getLetStatementAccess().getLetKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLetStatementAccess().getBindingsVarAssignParserRuleCall_2_0());
				}
				lv_bindings_2_0=ruleVarAssign
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLetStatementRule());
					}
					add(
						$current,
						"bindings",
						lv_bindings_2_0,
						"ale.xtext.Ale.VarAssign");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getLetStatementAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLetStatementAccess().getBindingsVarAssignParserRuleCall_3_1_0());
					}
					lv_bindings_4_0=ruleVarAssign
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLetStatementRule());
						}
						add(
							$current,
							"bindings",
							lv_bindings_4_0,
							"ale.xtext.Ale.VarAssign");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='in'
		{
			newLeafNode(otherlv_5, grammarAccess.getLetStatementAccess().getInKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLetStatementAccess().getBlockExpressionParserRuleCall_5_0_0());
					}
					lv_block_6_1=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLetStatementRule());
						}
						set(
							$current,
							"block",
							lv_block_6_1,
							"ale.xtext.Ale.Expression");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLetStatementAccess().getBlockLetStatementParserRuleCall_5_0_1());
					}
					lv_block_6_2=ruleLetStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLetStatementRule());
						}
						set(
							$current,
							"block",
							lv_block_6_2,
							"ale.xtext.Ale.LetStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfStatementAccess().getIfStatementAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getIfKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_3_0());
				}
				lv_condition_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_3_0,
						"ale.xtext.Ale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getThenBranchBlockParserRuleCall_5_0());
				}
				lv_thenBranch_5_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"thenBranch",
						lv_thenBranch_5_0,
						"ale.xtext.Ale.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='else'
			{
				newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getElseKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseBranchBlockParserRuleCall_6_1_0());
					}
					lv_elseBranch_7_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						set(
							$current,
							"elseBranch",
							lv_elseBranch_7_0,
							"ale.xtext.Ale.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileStatementAccess().getWhileStatementAction_0(),
					$current);
			}
		)
		otherlv_1='while'
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getWhileKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_3_0());
				}
				lv_condition_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_3_0,
						"ale.xtext.Ale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getWhileBlockBlockParserRuleCall_5_0());
				}
				lv_whileBlock_5_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"whileBlock",
						lv_whileBlock_5_0,
						"ale.xtext.Ale.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	iv_ruleForLoop=ruleForLoop
	{ $current=$iv_ruleForLoop.current; }
	EOF;

// Rule ForLoop
ruleForLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForLoopAccess().getForLoopAction_0(),
					$current);
			}
		)
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getForLoopAccess().getForKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getTypeTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"ale.xtext.Ale.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getForLoopAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForLoopRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_5='in'
		{
			newLeafNode(otherlv_5, grammarAccess.getForLoopAccess().getInKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getCollectionExpressionParserRuleCall_6_0());
				}
				lv_collection_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"collection",
						lv_collection_6_0,
						"ale.xtext.Ale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getForLoopAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getBlockBlockParserRuleCall_8_0());
				}
				lv_block_8_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"block",
						lv_block_8_0,
						"ale.xtext.Ale.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getBodyStatementParserRuleCall_2_0());
				}
				lv_body_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"body",
						lv_body_2_0,
						"ale.xtext.Ale.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleVarAssign
entryRuleVarAssign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarAssignRule()); }
	iv_ruleVarAssign=ruleVarAssign
	{ $current=$iv_ruleVarAssign.current; }
	EOF;

// Rule VarAssign
ruleVarAssign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getVarAssignAccess().getVarDeclarationAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVarAssignAccess().getTypeTypeParserRuleCall_0_1_0());
					}
					lv_type_1_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarAssignRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"ale.xtext.Ale.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getVarAssignAccess().getNameIDTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarAssignRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getVarAssignAccess().getEqualsSignKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarAssignAccess().getValueExpressionParserRuleCall_0_4_0());
					}
					lv_value_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarAssignRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"ale.xtext.Ale.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getVarAssignAccess().getVarAssignAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_name_6_0=RULE_ID
					{
						newLeafNode(lv_name_6_0, grammarAccess.getVarAssignAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarAssignRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_6_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_7='='
			{
				newLeafNode(otherlv_7, grammarAccess.getVarAssignAccess().getEqualsSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarAssignAccess().getValueExpressionParserRuleCall_1_3_0());
					}
					lv_value_8_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarAssignRule());
						}
						set(
							$current,
							"value",
							lv_value_8_0,
							"ale.xtext.Ale.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getImpliesOperationParserRuleCall());
	}
	this_ImpliesOperation_0=ruleImpliesOperation
	{
		$current = $this_ImpliesOperation_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleImpliesOperation
entryRuleImpliesOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImpliesOperationRule()); }
	iv_ruleImpliesOperation=ruleImpliesOperation
	{ $current=$iv_ruleImpliesOperation.current; }
	EOF;

// Rule ImpliesOperation
ruleImpliesOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImpliesOperationAccess().getBooleanOperationParserRuleCall_0());
		}
		this_BooleanOperation_0=ruleBooleanOperation
		{
			$current = $this_BooleanOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
					(
					)
					'implies'
				)
				(
					(
						ruleBooleanOperation
					)
				)
			)
			)=>
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getImpliesOperationAccess().getImpliesOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='implies'
					{
						newLeafNode(otherlv_2, grammarAccess.getImpliesOperationAccess().getImpliesKeyword_1_0_0_1());
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getImpliesOperationAccess().getRightBooleanOperationParserRuleCall_1_0_1_0());
						}
						lv_right_3_0=ruleBooleanOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getImpliesOperationRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"ale.xtext.Ale.BooleanOperation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleBooleanOperation
entryRuleBooleanOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanOperationRule()); }
	iv_ruleBooleanOperation=ruleBooleanOperation
	{ $current=$iv_ruleBooleanOperation.current; }
	EOF;

// Rule BooleanOperation
ruleBooleanOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanOperationAccess().getCompareOperationParserRuleCall_0());
		}
		this_CompareOperation_0=ruleCompareOperation
		{
			$current = $this_CompareOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
					(
						(
						)
						'or'
					)
					    |
					(
						(
						)
						'and'
					)
					    |
					(
						(
						)
						'xor'
					)
				)
				(
					(
						ruleCompareOperation
					)
				)
			)
			)=>
			(
				(
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getBooleanOperationAccess().getBooleanOrOperationLeftAction_1_0_0_0_0(),
									$current);
							}
						)
						otherlv_2='or'
						{
							newLeafNode(otherlv_2, grammarAccess.getBooleanOperationAccess().getOrKeyword_1_0_0_0_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getBooleanOperationAccess().getBooleanAndOperationLeftAction_1_0_0_1_0(),
									$current);
							}
						)
						otherlv_4='and'
						{
							newLeafNode(otherlv_4, grammarAccess.getBooleanOperationAccess().getAndKeyword_1_0_0_1_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getBooleanOperationAccess().getBooleanXorOperationLeftAction_1_0_0_2_0(),
									$current);
							}
						)
						otherlv_6='xor'
						{
							newLeafNode(otherlv_6, grammarAccess.getBooleanOperationAccess().getXorKeyword_1_0_0_2_1());
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getBooleanOperationAccess().getRightCompareOperationParserRuleCall_1_0_1_0());
						}
						lv_right_7_0=ruleCompareOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBooleanOperationRule());
							}
							set(
								$current,
								"right",
								lv_right_7_0,
								"ale.xtext.Ale.CompareOperation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleCompareOperation
entryRuleCompareOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareOperationRule()); }
	iv_ruleCompareOperation=ruleCompareOperation
	{ $current=$iv_ruleCompareOperation.current; }
	EOF;

// Rule CompareOperation
ruleCompareOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompareOperationAccess().getEqualityOperationParserRuleCall_0());
		}
		this_EqualityOperation_0=ruleEqualityOperation
		{
			$current = $this_EqualityOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
					(
						(
						)
						'<='
					)
					    |
					(
						(
						)
						'>='
					)
					    |
					(
						(
						)
						'!='
					)
					    |
					(
						(
						)
						'<'
					)
					    |
					(
						(
						)
						'>'
					)
					    |
					(
						(
						)
						'instanceof'
					)
					    |
					(
						(
						)
						'castto'
					)
				)
				(
					(
						ruleEqualityOperation
					)
				)
			)
			)=>
			(
				(
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getCompareOperationAccess().getCompareLEOperationLeftAction_1_0_0_0_0(),
									$current);
							}
						)
						otherlv_2='<='
						{
							newLeafNode(otherlv_2, grammarAccess.getCompareOperationAccess().getLessThanSignEqualsSignKeyword_1_0_0_0_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getCompareOperationAccess().getCompareGEOperationLeftAction_1_0_0_1_0(),
									$current);
							}
						)
						otherlv_4='>='
						{
							newLeafNode(otherlv_4, grammarAccess.getCompareOperationAccess().getGreaterThanSignEqualsSignKeyword_1_0_0_1_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getCompareOperationAccess().getCompareNEOperationLeftAction_1_0_0_2_0(),
									$current);
							}
						)
						otherlv_6='!='
						{
							newLeafNode(otherlv_6, grammarAccess.getCompareOperationAccess().getExclamationMarkEqualsSignKeyword_1_0_0_2_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getCompareOperationAccess().getCompareLOperationLeftAction_1_0_0_3_0(),
									$current);
							}
						)
						otherlv_8='<'
						{
							newLeafNode(otherlv_8, grammarAccess.getCompareOperationAccess().getLessThanSignKeyword_1_0_0_3_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getCompareOperationAccess().getCompareGOperationLeftAction_1_0_0_4_0(),
									$current);
							}
						)
						otherlv_10='>'
						{
							newLeafNode(otherlv_10, grammarAccess.getCompareOperationAccess().getGreaterThanSignKeyword_1_0_0_4_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getCompareOperationAccess().getInstanceofOperationLeftAction_1_0_0_5_0(),
									$current);
							}
						)
						otherlv_12='instanceof'
						{
							newLeafNode(otherlv_12, grammarAccess.getCompareOperationAccess().getInstanceofKeyword_1_0_0_5_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getCompareOperationAccess().getCasttoOperationLeftAction_1_0_0_6_0(),
									$current);
							}
						)
						otherlv_14='castto'
						{
							newLeafNode(otherlv_14, grammarAccess.getCompareOperationAccess().getCasttoKeyword_1_0_0_6_1());
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCompareOperationAccess().getRightEqualityOperationParserRuleCall_1_0_1_0());
						}
						lv_right_15_0=ruleEqualityOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCompareOperationRule());
							}
							set(
								$current,
								"right",
								lv_right_15_0,
								"ale.xtext.Ale.EqualityOperation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualityOperation
entryRuleEqualityOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityOperationRule()); }
	iv_ruleEqualityOperation=ruleEqualityOperation
	{ $current=$iv_ruleEqualityOperation.current; }
	EOF;

// Rule EqualityOperation
ruleEqualityOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityOperationAccess().getMultOperationParserRuleCall_0());
		}
		this_MultOperation_0=ruleMultOperation
		{
			$current = $this_MultOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
				)
				(
					(
						'=='
					)
				)
				(
					(
						ruleMultOperation
					)
				)
			)
			)=>
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getEqualityOperationAccess().getEqualityOperationLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						lv_op_2_0='=='
						{
							newLeafNode(lv_op_2_0, grammarAccess.getEqualityOperationAccess().getOpEqualsSignEqualsSignKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityOperationRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_0, "==");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getEqualityOperationAccess().getRightMultOperationParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleMultOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEqualityOperationRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"ale.xtext.Ale.MultOperation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleMultOperation
entryRuleMultOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultOperationRule()); }
	iv_ruleMultOperation=ruleMultOperation
	{ $current=$iv_ruleMultOperation.current; }
	EOF;

// Rule MultOperation
ruleMultOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultOperationAccess().getAddOperationParserRuleCall_0());
		}
		this_AddOperation_0=ruleAddOperation
		{
			$current = $this_AddOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
					(
						(
						)
						'*'
					)
					    |
					(
						(
						)
						'/'
					)
				)
				(
					(
						ruleAddOperation
					)
				)
			)
			)=>
			(
				(
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getMultOperationAccess().getMultOperationLeftAction_1_0_0_0_0(),
									$current);
							}
						)
						otherlv_2='*'
						{
							newLeafNode(otherlv_2, grammarAccess.getMultOperationAccess().getAsteriskKeyword_1_0_0_0_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getMultOperationAccess().getDivOperationLeftAction_1_0_0_1_0(),
									$current);
							}
						)
						otherlv_4='/'
						{
							newLeafNode(otherlv_4, grammarAccess.getMultOperationAccess().getSolidusKeyword_1_0_0_1_1());
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getMultOperationAccess().getRightAddOperationParserRuleCall_1_0_1_0());
						}
						lv_right_5_0=ruleAddOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultOperationRule());
							}
							set(
								$current,
								"right",
								lv_right_5_0,
								"ale.xtext.Ale.AddOperation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleAddOperation
entryRuleAddOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddOperationRule()); }
	iv_ruleAddOperation=ruleAddOperation
	{ $current=$iv_ruleAddOperation.current; }
	EOF;

// Rule AddOperation
ruleAddOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddOperationAccess().getChaindedCallParserRuleCall_0());
		}
		this_ChaindedCall_0=ruleChaindedCall
		{
			$current = $this_ChaindedCall_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
					(
						(
						)
						'+'
					)
					    |
					(
						(
						)
						'-'
					)
				)
				(
					(
						ruleChaindedCall
					)
				)
			)
			)=>
			(
				(
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getAddOperationAccess().getAddOperationLeftAction_1_0_0_0_0(),
									$current);
							}
						)
						otherlv_2='+'
						{
							newLeafNode(otherlv_2, grammarAccess.getAddOperationAccess().getPlusSignKeyword_1_0_0_0_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getAddOperationAccess().getSubOperationLeftAction_1_0_0_1_0(),
									$current);
							}
						)
						otherlv_4='-'
						{
							newLeafNode(otherlv_4, grammarAccess.getAddOperationAccess().getHyphenMinusKeyword_1_0_0_1_1());
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAddOperationAccess().getRightChaindedCallParserRuleCall_1_0_1_0());
						}
						lv_right_5_0=ruleChaindedCall
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAddOperationRule());
							}
							set(
								$current,
								"right",
								lv_right_5_0,
								"ale.xtext.Ale.ChaindedCall");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleChaindedCall
entryRuleChaindedCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChaindedCallRule()); }
	iv_ruleChaindedCall=ruleChaindedCall
	{ $current=$iv_ruleChaindedCall.current; }
	EOF;

// Rule ChaindedCall
ruleChaindedCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getChaindedCallAccess().getInfixOperationParserRuleCall_0());
		}
		this_InfixOperation_0=ruleInfixOperation
		{
			$current = $this_InfixOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
					(
						(
						)
						'.'
					)
					    |
					(
						(
						)
						'->'
					)
				)
				(
					(
						ruleInfixOperation
					)
				)
			)
			)=>
			(
				(
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getChaindedCallAccess().getChainedCallLeftAction_1_0_0_0_0(),
									$current);
							}
						)
						otherlv_2='.'
						{
							newLeafNode(otherlv_2, grammarAccess.getChaindedCallAccess().getFullStopKeyword_1_0_0_0_1());
						}
					)
					    |
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getChaindedCallAccess().getChainedCallArrowLeftAction_1_0_0_1_0(),
									$current);
							}
						)
						otherlv_4='->'
						{
							newLeafNode(otherlv_4, grammarAccess.getChaindedCallAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0_1_1());
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getChaindedCallAccess().getRightInfixOperationParserRuleCall_1_0_1_0());
						}
						lv_right_5_0=ruleInfixOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getChaindedCallRule());
							}
							set(
								$current,
								"right",
								lv_right_5_0,
								"ale.xtext.Ale.InfixOperation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleInfixOperation
entryRuleInfixOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInfixOperationRule()); }
	iv_ruleInfixOperation=ruleInfixOperation
	{ $current=$iv_ruleInfixOperation.current; }
	EOF;

// Rule InfixOperation
ruleInfixOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInfixOperationAccess().getNotInfixOperationAction_0_0(),
						$current);
				}
			)
			otherlv_1='not'
			{
				newLeafNode(otherlv_1, grammarAccess.getInfixOperationAccess().getNotKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInfixOperationAccess().getExpressionExpressionParserRuleCall_0_2_0());
					}
					lv_expression_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInfixOperationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"ale.xtext.Ale.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInfixOperationAccess().getNegInfixOperationAction_1_0(),
						$current);
				}
			)
			otherlv_4='-'
			{
				newLeafNode(otherlv_4, grammarAccess.getInfixOperationAccess().getHyphenMinusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInfixOperationAccess().getExpressionExpressionParserRuleCall_1_2_0());
					}
					lv_expression_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInfixOperationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"ale.xtext.Ale.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInfixOperationAccess().getNewSequenceAction_2_0(),
						$current);
				}
			)
			otherlv_7='newSequence'
			{
				newLeafNode(otherlv_7, grammarAccess.getInfixOperationAccess().getNewSequenceKeyword_2_1());
			}
			otherlv_8='('
			{
				newLeafNode(otherlv_8, grammarAccess.getInfixOperationAccess().getLeftParenthesisKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInfixOperationAccess().getTypeTypeParserRuleCall_2_3_0());
					}
					lv_type_9_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInfixOperationRule());
						}
						set(
							$current,
							"type",
							lv_type_9_0,
							"ale.xtext.Ale.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getInfixOperationAccess().getRightParenthesisKeyword_2_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInfixOperationAccess().getConstructorOperationAction_3_0(),
						$current);
				}
			)
			otherlv_12='new'
			{
				newLeafNode(otherlv_12, grammarAccess.getInfixOperationAccess().getNewKeyword_3_1());
			}
			(
				(
					lv_name_13_0=RULE_ID
					{
						newLeafNode(lv_name_13_0, grammarAccess.getInfixOperationAccess().getNameIDTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInfixOperationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_13_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_14='('
			{
				newLeafNode(otherlv_14, grammarAccess.getInfixOperationAccess().getLeftParenthesisKeyword_3_3());
			}
			otherlv_15=')'
			{
				newLeafNode(otherlv_15, grammarAccess.getInfixOperationAccess().getRightParenthesisKeyword_3_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getInfixOperationAccess().getOperationCallOperationAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_name_17_0=RULE_ID
					{
						newLeafNode(lv_name_17_0, grammarAccess.getInfixOperationAccess().getNameIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInfixOperationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_17_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_18='('
				{
					newLeafNode(otherlv_18, grammarAccess.getInfixOperationAccess().getLeftParenthesisKeyword_4_2_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getInfixOperationAccess().getParametersParamCallParserRuleCall_4_2_1_0_0());
							}
							lv_parameters_19_0=ruleParamCall
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getInfixOperationRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_19_0,
									"ale.xtext.Ale.ParamCall");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_20=','
						{
							newLeafNode(otherlv_20, grammarAccess.getInfixOperationAccess().getCommaKeyword_4_2_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getInfixOperationAccess().getParametersParamCallParserRuleCall_4_2_1_1_1_0());
								}
								lv_parameters_21_0=ruleParamCall
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getInfixOperationRule());
									}
									add(
										$current,
										"parameters",
										lv_parameters_21_0,
										"ale.xtext.Ale.ParamCall");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_22=')'
				{
					newLeafNode(otherlv_22, grammarAccess.getInfixOperationAccess().getRightParenthesisKeyword_4_2_2());
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getInfixOperationAccess().getAtomicLiteralParserRuleCall_5());
		}
		this_AtomicLiteral_23=ruleAtomicLiteral
		{
			$current = $this_AtomicLiteral_23.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParamCall
entryRuleParamCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamCallRule()); }
	iv_ruleParamCall=ruleParamCall
	{ $current=$iv_ruleParamCall.current; }
	EOF;

// Rule ParamCall
ruleParamCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_lambda_0_0=RULE_ID
					{
						newLeafNode(lv_lambda_0_0, grammarAccess.getParamCallAccess().getLambdaIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamCallRule());
						}
						setWithLastConsumed(
							$current,
							"lambda",
							lv_lambda_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1='|'
			{
				newLeafNode(otherlv_1, grammarAccess.getParamCallAccess().getVerticalLineKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getParamCallAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParamCallRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"ale.xtext.Ale.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAtomicLiteral
entryRuleAtomicLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicLiteralRule()); }
	iv_ruleAtomicLiteral=ruleAtomicLiteral
	{ $current=$iv_ruleAtomicLiteral.current; }
	EOF;

// Rule AtomicLiteral
ruleAtomicLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getAtomicLiteralAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getAtomicLiteralAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getAtomicLiteralAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getOADenotAction_1_0(),
						$current);
				}
			)
			otherlv_4='$'
			{
				newLeafNode(otherlv_4, grammarAccess.getAtomicLiteralAccess().getDollarSignKeyword_1_1());
			}
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getAtomicLiteralAccess().getLeftSquareBracketKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicLiteralAccess().getExpExpressionParserRuleCall_1_3_0());
					}
					lv_exp_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicLiteralRule());
						}
						set(
							$current,
							"exp",
							lv_exp_6_0,
							"ale.xtext.Ale.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getAtomicLiteralAccess().getRightSquareBracketKeyword_1_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getSelfRefAction_2_0(),
						$current);
				}
			)
			otherlv_9='self'
			{
				newLeafNode(otherlv_9, grammarAccess.getAtomicLiteralAccess().getSelfKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getSuperRefAction_3_0(),
						$current);
				}
			)
			otherlv_11='super'
			{
				newLeafNode(otherlv_11, grammarAccess.getAtomicLiteralAccess().getSuperKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getStringLiteralAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_value_13_0=RULE_STRING
					{
						newLeafNode(lv_value_13_0, grammarAccess.getAtomicLiteralAccess().getValueSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_13_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getIntLiteralAction_5_0(),
						$current);
				}
			)
			(
				(
					lv_value_15_0=RULE_INT
					{
						newLeafNode(lv_value_15_0, grammarAccess.getAtomicLiteralAccess().getValueINTTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_15_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getRealLiteralAction_6_0(),
						$current);
				}
			)
			(
				(
					lv_value_17_0=RULE_REAL
					{
						newLeafNode(lv_value_17_0, grammarAccess.getAtomicLiteralAccess().getValueREALTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_17_0,
							"ale.xtext.Ale.REAL");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getBooleanLiteralAction_7_0(),
						$current);
				}
			)
			(
				(
					lv_value_19_0=RULE_BOOLEAN
					{
						newLeafNode(lv_value_19_0, grammarAccess.getAtomicLiteralAccess().getValueBOOLEANTerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_19_0,
							"ale.xtext.Ale.BOOLEAN");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getNullLiteralAction_8_0(),
						$current);
				}
			)
			this_NULL_21=RULE_NULL
			{
				newLeafNode(this_NULL_21, grammarAccess.getAtomicLiteralAccess().getNULLTerminalRuleCall_8_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getIntRangeAction_9_0(),
						$current);
				}
			)
			otherlv_23='['
			{
				newLeafNode(otherlv_23, grammarAccess.getAtomicLiteralAccess().getLeftSquareBracketKeyword_9_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicLiteralAccess().getStartExpressionParserRuleCall_9_2_0());
					}
					lv_start_24_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicLiteralRule());
						}
						set(
							$current,
							"start",
							lv_start_24_0,
							"ale.xtext.Ale.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_25='.'
			{
				newLeafNode(otherlv_25, grammarAccess.getAtomicLiteralAccess().getFullStopKeyword_9_3());
			}
			otherlv_26='.'
			{
				newLeafNode(otherlv_26, grammarAccess.getAtomicLiteralAccess().getFullStopKeyword_9_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicLiteralAccess().getStopExpressionParserRuleCall_9_5_0());
					}
					lv_stop_27_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicLiteralRule());
						}
						set(
							$current,
							"stop",
							lv_stop_27_0,
							"ale.xtext.Ale.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_28=']'
			{
				newLeafNode(otherlv_28, grammarAccess.getAtomicLiteralAccess().getRightSquareBracketKeyword_9_6());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getSequenceDeclAction_10_0(),
						$current);
				}
			)
			otherlv_30='Sequence'
			{
				newLeafNode(otherlv_30, grammarAccess.getAtomicLiteralAccess().getSequenceKeyword_10_1());
			}
			otherlv_31='{'
			{
				newLeafNode(otherlv_31, grammarAccess.getAtomicLiteralAccess().getLeftCurlyBracketKeyword_10_2());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAtomicLiteralAccess().getExpressionsExpressionParserRuleCall_10_3_0_0());
						}
						lv_expressions_32_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAtomicLiteralRule());
							}
							add(
								$current,
								"expressions",
								lv_expressions_32_0,
								"ale.xtext.Ale.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_33=','
					{
						newLeafNode(otherlv_33, grammarAccess.getAtomicLiteralAccess().getCommaKeyword_10_3_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAtomicLiteralAccess().getExpressionsExpressionParserRuleCall_10_3_1_1_0());
							}
							lv_expressions_34_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAtomicLiteralRule());
								}
								add(
									$current,
									"expressions",
									lv_expressions_34_0,
									"ale.xtext.Ale.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_35='}'
			{
				newLeafNode(otherlv_35, grammarAccess.getAtomicLiteralAccess().getRightCurlyBracketKeyword_10_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getOrderedSetDeclAction_11_0(),
						$current);
				}
			)
			otherlv_37='OrderedSet'
			{
				newLeafNode(otherlv_37, grammarAccess.getAtomicLiteralAccess().getOrderedSetKeyword_11_1());
			}
			otherlv_38='{'
			{
				newLeafNode(otherlv_38, grammarAccess.getAtomicLiteralAccess().getLeftCurlyBracketKeyword_11_2());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAtomicLiteralAccess().getExpressionsExpressionParserRuleCall_11_3_0_0());
						}
						lv_expressions_39_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAtomicLiteralRule());
							}
							add(
								$current,
								"expressions",
								lv_expressions_39_0,
								"ale.xtext.Ale.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_40=','
					{
						newLeafNode(otherlv_40, grammarAccess.getAtomicLiteralAccess().getCommaKeyword_11_3_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAtomicLiteralAccess().getExpressionsExpressionParserRuleCall_11_3_1_1_0());
							}
							lv_expressions_41_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAtomicLiteralRule());
								}
								add(
									$current,
									"expressions",
									lv_expressions_41_0,
									"ale.xtext.Ale.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_42='}'
			{
				newLeafNode(otherlv_42, grammarAccess.getAtomicLiteralAccess().getRightCurlyBracketKeyword_11_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicLiteralAccess().getVarRefAction_12_0(),
						$current);
				}
			)
			(
				(
					lv_value_44_0=RULE_ID
					{
						newLeafNode(lv_value_44_0, grammarAccess.getAtomicLiteralAccess().getValueIDTerminalRuleCall_12_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_44_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	iv_ruleParam=ruleParam
	{ $current=$iv_ruleParam.current; }
	EOF;

// Rule Param
ruleParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParamAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParamRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"ale.xtext.Ale.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParamAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getLiteralTypeParserRuleCall_0());
		}
		this_LiteralType_0=ruleLiteralType
		{
			$current = $this_LiteralType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getOutOfScopeTypeAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_externalClass_2_0=RULE_ID
					{
						newLeafNode(lv_externalClass_2_0, grammarAccess.getTypeAccess().getExternalClassIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed(
							$current,
							"externalClass",
							lv_externalClass_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getSequenceTypeAction_2_0(),
						$current);
				}
			)
			otherlv_4='Sequence'
			{
				newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getSequenceKeyword_2_1());
			}
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getSubTypeTypeParserRuleCall_2_3_0());
					}
					lv_subType_6_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"subType",
							lv_subType_6_0,
							"ale.xtext.Ale.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getOrderedSetTypeAction_3_0(),
						$current);
				}
			)
			otherlv_9='OrderedSet'
			{
				newLeafNode(otherlv_9, grammarAccess.getTypeAccess().getOrderedSetKeyword_3_1());
			}
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getSubTypeTypeParserRuleCall_3_3_0());
					}
					lv_subType_11_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"subType",
							lv_subType_11_0,
							"ale.xtext.Ale.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getTypeAccess().getRightParenthesisKeyword_3_4());
			}
		)
	)
;

// Entry rule entryRuleLiteralType
entryRuleLiteralType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralTypeRule()); }
	iv_ruleLiteralType=ruleLiteralType
	{ $current=$iv_ruleLiteralType.current; }
	EOF;

// Rule LiteralType
ruleLiteralType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_lit_0_1='Boolean'
				{
					newLeafNode(lv_lit_0_1, grammarAccess.getLiteralTypeAccess().getLitBooleanKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralTypeRule());
					}
					setWithLastConsumed($current, "lit", lv_lit_0_1, null);
				}
				    |
				lv_lit_0_2='Float'
				{
					newLeafNode(lv_lit_0_2, grammarAccess.getLiteralTypeAccess().getLitFloatKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralTypeRule());
					}
					setWithLastConsumed($current, "lit", lv_lit_0_2, null);
				}
				    |
				lv_lit_0_3='Integer'
				{
					newLeafNode(lv_lit_0_3, grammarAccess.getLiteralTypeAccess().getLitIntegerKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralTypeRule());
					}
					setWithLastConsumed($current, "lit", lv_lit_0_3, null);
				}
				    |
				lv_lit_0_4='String'
				{
					newLeafNode(lv_lit_0_4, grammarAccess.getLiteralTypeAccess().getLitStringKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralTypeRule());
					}
					setWithLastConsumed($current, "lit", lv_lit_0_4, null);
				}
			)
		)
	)
;

// Entry rule entryRuleQualified
entryRuleQualified returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedRule()); }
	iv_ruleQualified=ruleQualified
	{ $current=$iv_ruleQualified.current.getText(); }
	EOF;

// Rule Qualified
ruleQualified returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleTypeSystem
entryRuleTypeSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSystemRule()); }
	iv_ruleTypeSystem=ruleTypeSystem
	{ $current=$iv_ruleTypeSystem.current; }
	EOF;

// Rule TypeSystem
ruleTypeSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeSystemAccess().getBooleanTypeTAction_0_0(),
						$current);
				}
			)
			otherlv_1='Boolean'
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeSystemAccess().getBooleanKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeSystemAccess().getRealTypeTAction_1_0(),
						$current);
				}
			)
			otherlv_3='Real'
			{
				newLeafNode(otherlv_3, grammarAccess.getTypeSystemAccess().getRealKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeSystemAccess().getIntTypeTAction_2_0(),
						$current);
				}
			)
			otherlv_5='Int'
			{
				newLeafNode(otherlv_5, grammarAccess.getTypeSystemAccess().getIntKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeSystemAccess().getStringTypeTAction_3_0(),
						$current);
				}
			)
			otherlv_7='String'
			{
				newLeafNode(otherlv_7, grammarAccess.getTypeSystemAccess().getStringKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeSystemAccess().getNullTypeTAction_4_0(),
						$current);
				}
			)
			otherlv_9='nulltype'
			{
				newLeafNode(otherlv_9, grammarAccess.getTypeSystemAccess().getNulltypeKeyword_4_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeSystemAccess().getSequenceTypeTAction_5_0(),
						$current);
				}
			)
			otherlv_11='Sequence'
			{
				newLeafNode(otherlv_11, grammarAccess.getTypeSystemAccess().getSequenceKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeSystemAccess().getSubTypeTypeSystemParserRuleCall_5_2_0());
					}
					lv_subType_12_0=ruleTypeSystem
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeSystemRule());
						}
						set(
							$current,
							"subType",
							lv_subType_12_0,
							"ale.xtext.Ale.TypeSystem");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeSystemAccess().getClassTypeTAction_6_0(),
						$current);
				}
			)
			otherlv_14='class'
			{
				newLeafNode(otherlv_14, grammarAccess.getTypeSystemAccess().getClassKeyword_6_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeSystemRule());
						}
					}
					otherlv_15=RULE_ID
					{
						newLeafNode(otherlv_15, grammarAccess.getTypeSystemAccess().getClazzAleClassCrossReference_6_2_0());
					}
				)
			)
		)
	)
;

RULE_REAL : ('0'..'9')+ '.' ('0'..'9')+;

RULE_BOOLEAN : ('true'|'false');

RULE_NULL : 'null';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
