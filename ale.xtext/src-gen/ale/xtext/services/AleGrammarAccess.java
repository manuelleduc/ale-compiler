/*
 * generated by Xtext 2.10.0
 */
package ale.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AleGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cClassesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassesAleClassParserRuleCall_4_0 = (RuleCall)cClassesAssignment_4.eContents().get(0);
		
		//Root:
		//	'behavior' name=Qualified ';'
		//	imports+=Import*
		//	classes+=AleClass*;
		@Override public ParserRule getRule() { return rule; }
		
		//'behavior' name=Qualified ';' imports+=Import* classes+=AleClass*
		public Group getGroup() { return cGroup; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }
		
		//name=Qualified
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Qualified
		public RuleCall getNameQualifiedParserRuleCall_1_0() { return cNameQualifiedParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//classes+=AleClass*
		public Assignment getClassesAssignment_4() { return cClassesAssignment_4; }
		
		//AleClass
		public RuleCall getClassesAleClassParserRuleCall_4_0() { return cClassesAleClassParserRuleCall_4_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefRootCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefRootIDTerminalRuleCall_1_0_1 = (RuleCall)cRefRootCrossReference_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Import:
		//	'import' ref=[Root] 'as' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' ref=[Root] 'as' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//ref=[Root]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Root]
		public CrossReference getRefRootCrossReference_1_0() { return cRefRootCrossReference_1_0; }
		
		//ID
		public RuleCall getRefRootIDTerminalRuleCall_1_0_1() { return cRefRootIDTerminalRuleCall_1_0_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class AleClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.AleClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNewClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AleClass:
		//	OpenClass | NewClass;
		@Override public ParserRule getRule() { return rule; }
		
		//OpenClass | NewClass
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OpenClass
		public RuleCall getOpenClassParserRuleCall_0() { return cOpenClassParserRuleCall_0; }
		
		//NewClass
		public RuleCall getNewClassParserRuleCall_1() { return cNewClassParserRuleCall_1; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Tag:
		//	'@' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' ID
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class OpenClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.OpenClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpenClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOpenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperClassAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperClassAleClassCrossReference_4_1_0 = (CrossReference)cSuperClassAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperClassAleClassQualifiedParserRuleCall_4_1_0_1 = (RuleCall)cSuperClassAleClassCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSuperClassAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cSuperClassAleClassCrossReference_4_2_1_0 = (CrossReference)cSuperClassAssignment_4_2_1.eContents().get(0);
		private final RuleCall cSuperClassAleClassQualifiedParserRuleCall_4_2_1_0_1 = (RuleCall)cSuperClassAleClassCrossReference_4_2_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFieldsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_5_1_0 = (RuleCall)cFieldsAssignment_5_1.eContents().get(0);
		private final Assignment cMethodsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cMethodsMethodParserRuleCall_5_2_0 = (RuleCall)cMethodsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//OpenClass AleClass:
		//	{OpenClass} 'open' 'class' name=ID ('extends' superClass+=[AleClass|Qualified] (','
		//	superClass+=[AleClass|Qualified])*)? ('{'
		//	fields+=Field*
		//	methods+=Method*
		//	'}')
		@Override public ParserRule getRule() { return rule; }
		
		//{OpenClass} 'open' 'class' name=ID ('extends' superClass+=[AleClass|Qualified] (',' superClass+=[AleClass|Qualified])*)?
		//('{' fields+=Field* methods+=Method* '}')
		public Group getGroup() { return cGroup; }
		
		//{OpenClass}
		public Action getOpenClassAction_0() { return cOpenClassAction_0; }
		
		//'open'
		public Keyword getOpenKeyword_1() { return cOpenKeyword_1; }
		
		//'class'
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('extends' superClass+=[AleClass|Qualified] (',' superClass+=[AleClass|Qualified])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//superClass+=[AleClass|Qualified]
		public Assignment getSuperClassAssignment_4_1() { return cSuperClassAssignment_4_1; }
		
		//[AleClass|Qualified]
		public CrossReference getSuperClassAleClassCrossReference_4_1_0() { return cSuperClassAleClassCrossReference_4_1_0; }
		
		//Qualified
		public RuleCall getSuperClassAleClassQualifiedParserRuleCall_4_1_0_1() { return cSuperClassAleClassQualifiedParserRuleCall_4_1_0_1; }
		
		//(',' superClass+=[AleClass|Qualified])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//superClass+=[AleClass|Qualified]
		public Assignment getSuperClassAssignment_4_2_1() { return cSuperClassAssignment_4_2_1; }
		
		//[AleClass|Qualified]
		public CrossReference getSuperClassAleClassCrossReference_4_2_1_0() { return cSuperClassAleClassCrossReference_4_2_1_0; }
		
		//Qualified
		public RuleCall getSuperClassAleClassQualifiedParserRuleCall_4_2_1_0_1() { return cSuperClassAleClassQualifiedParserRuleCall_4_2_1_0_1; }
		
		//('{' fields+=Field* methods+=Method* '}')
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_5_1() { return cFieldsAssignment_5_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_5_1_0() { return cFieldsFieldParserRuleCall_5_1_0; }
		
		//methods+=Method*
		public Assignment getMethodsAssignment_5_2() { return cMethodsAssignment_5_2; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_5_2_0() { return cMethodsMethodParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class NewClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.NewClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNewClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperClassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperClassAleClassCrossReference_3_1_0 = (CrossReference)cSuperClassAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperClassAleClassQualifiedParserRuleCall_3_1_0_1 = (RuleCall)cSuperClassAleClassCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperClassAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cSuperClassAleClassCrossReference_3_2_1_0 = (CrossReference)cSuperClassAssignment_3_2_1.eContents().get(0);
		private final RuleCall cSuperClassAleClassQualifiedParserRuleCall_3_2_1_0_1 = (RuleCall)cSuperClassAleClassCrossReference_3_2_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFieldsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_4_1_0 = (RuleCall)cFieldsAssignment_4_1.eContents().get(0);
		private final Assignment cMethodsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cMethodsMethodParserRuleCall_4_2_0 = (RuleCall)cMethodsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//NewClass AleClass:
		//	{NewClass} 'class' name=ID ('extends' superClass+=[AleClass|Qualified] (',' superClass+=[AleClass|Qualified])*)? ('{'
		//	fields+=Field*
		//	methods+=Method*
		//	'}')
		@Override public ParserRule getRule() { return rule; }
		
		//{NewClass} 'class' name=ID ('extends' superClass+=[AleClass|Qualified] (',' superClass+=[AleClass|Qualified])*)? ('{'
		//fields+=Field* methods+=Method* '}')
		public Group getGroup() { return cGroup; }
		
		//{NewClass}
		public Action getNewClassAction_0() { return cNewClassAction_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' superClass+=[AleClass|Qualified] (',' superClass+=[AleClass|Qualified])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superClass+=[AleClass|Qualified]
		public Assignment getSuperClassAssignment_3_1() { return cSuperClassAssignment_3_1; }
		
		//[AleClass|Qualified]
		public CrossReference getSuperClassAleClassCrossReference_3_1_0() { return cSuperClassAleClassCrossReference_3_1_0; }
		
		//Qualified
		public RuleCall getSuperClassAleClassQualifiedParserRuleCall_3_1_0_1() { return cSuperClassAleClassQualifiedParserRuleCall_3_1_0_1; }
		
		//(',' superClass+=[AleClass|Qualified])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//superClass+=[AleClass|Qualified]
		public Assignment getSuperClassAssignment_3_2_1() { return cSuperClassAssignment_3_2_1; }
		
		//[AleClass|Qualified]
		public CrossReference getSuperClassAleClassCrossReference_3_2_1_0() { return cSuperClassAleClassCrossReference_3_2_1_0; }
		
		//Qualified
		public RuleCall getSuperClassAleClassQualifiedParserRuleCall_3_2_1_0_1() { return cSuperClassAleClassQualifiedParserRuleCall_3_2_1_0_1; }
		
		//('{' fields+=Field* methods+=Method* '}')
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//fields+=Field*
		public Assignment getFieldsAssignment_4_1() { return cFieldsAssignment_4_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_4_1_0() { return cFieldsFieldParserRuleCall_4_1_0; }
		
		//methods+=Method*
		public Assignment getMethodsAssignment_4_2() { return cMethodsAssignment_4_2; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_4_2_0() { return cMethodsMethodParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Field:
		//	type=Type name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Method");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOverrideMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Method:
		//	DefMethod | OverrideMethod;
		@Override public ParserRule getRule() { return rule; }
		
		//DefMethod | OverrideMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefMethod
		public RuleCall getDefMethodParserRuleCall_0() { return cDefMethodParserRuleCall_0; }
		
		//OverrideMethod
		public RuleCall getOverrideMethodParserRuleCall_1() { return cOverrideMethodParserRuleCall_1; }
	}
	public class DefMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.DefMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Keyword cVoidKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cParamsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_4_1_0_0 = (RuleCall)cParamsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_4_1_1_1_0 = (RuleCall)cParamsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		
		//DefMethod:
		//	tags+=Tag* 'def' (type=Type | 'void') name=ID ('(' (params+=Param (',' params+=Param)*)? ')') block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=Tag* 'def' (type=Type | 'void') name=ID ('(' (params+=Param (',' params+=Param)*)? ')') block=Block
		public Group getGroup() { return cGroup; }
		
		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//(type=Type | 'void')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//type=Type
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0_0() { return cTypeTypeParserRuleCall_2_0_0; }
		
		//'void'
		public Keyword getVoidKeyword_2_1() { return cVoidKeyword_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('(' (params+=Param (',' params+=Param)*)? ')')
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//(params+=Param (',' params+=Param)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//params+=Param
		public Assignment getParamsAssignment_4_1_0() { return cParamsAssignment_4_1_0; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_4_1_0_0() { return cParamsParamParserRuleCall_4_1_0_0; }
		
		//(',' params+=Param)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//params+=Param
		public Assignment getParamsAssignment_4_1_1_1() { return cParamsAssignment_4_1_1_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_4_1_1_1_0() { return cParamsParamParserRuleCall_4_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//block=Block
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_5_0() { return cBlockBlockParserRuleCall_5_0; }
	}
	public class OverrideMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.OverrideMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cOverrideKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cParamsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_4_1_0_0 = (RuleCall)cParamsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_4_1_1_1_0 = (RuleCall)cParamsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockBlockParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		
		//OverrideMethod:
		//	tags+=Tag* 'override' type=Type name=ID ('(' (params+=Param (',' params+=Param)*)? ')') block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=Tag* 'override' type=Type name=ID ('(' (params+=Param (',' params+=Param)*)? ')') block=Block
		public Group getGroup() { return cGroup; }
		
		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }
		
		//'override'
		public Keyword getOverrideKeyword_1() { return cOverrideKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('(' (params+=Param (',' params+=Param)*)? ')')
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//(params+=Param (',' params+=Param)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//params+=Param
		public Assignment getParamsAssignment_4_1_0() { return cParamsAssignment_4_1_0; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_4_1_0_0() { return cParamsParamParserRuleCall_4_1_0_0; }
		
		//(',' params+=Param)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//params+=Param
		public Assignment getParamsAssignment_4_1_1_1() { return cParamsAssignment_4_1_1_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_4_1_1_1_0() { return cParamsParamParserRuleCall_4_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
		
		//block=Block
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_5_0() { return cBlockBlockParserRuleCall_5_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVarAssignParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cForLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cLetStatementParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cReturnStatementParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cExpressionParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		
		//Statement:
		//	VarAssign ';' | ForLoop | IfStatement | WhileStatement | LetStatement ';' | ReturnStatement ';' | Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//VarAssign ';' | ForLoop | IfStatement | WhileStatement | LetStatement ';' | ReturnStatement ';' | Expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarAssign ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//VarAssign
		public RuleCall getVarAssignParserRuleCall_0_0() { return cVarAssignParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_1() { return cForLoopParserRuleCall_1; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_2() { return cIfStatementParserRuleCall_2; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_3() { return cWhileStatementParserRuleCall_3; }
		
		//LetStatement ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//LetStatement
		public RuleCall getLetStatementParserRuleCall_4_0() { return cLetStatementParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//ReturnStatement ';'
		public Group getGroup_5() { return cGroup_5; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_5_0() { return cReturnStatementParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//Expression ';'
		public Group getGroup_6() { return cGroup_6; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_6_0() { return cExpressionParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnedExpressionParserRuleCall_2_0 = (RuleCall)cReturnedAssignment_2.eContents().get(0);
		
		//ReturnStatement Statement:
		//	{ReturnStatement} 'return' returned=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStatement} 'return' returned=Expression
		public Group getGroup() { return cGroup; }
		
		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//returned=Expression
		public Assignment getReturnedAssignment_2() { return cReturnedAssignment_2; }
		
		//Expression
		public RuleCall getReturnedExpressionParserRuleCall_2_0() { return cReturnedExpressionParserRuleCall_2_0; }
	}
	public class LetStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.LetStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLetStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBindingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBindingsVarAssignParserRuleCall_2_0 = (RuleCall)cBindingsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBindingsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBindingsVarAssignParserRuleCall_3_1_0 = (RuleCall)cBindingsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cBlockAlternatives_5_0 = (Alternatives)cBlockAssignment_5.eContents().get(0);
		private final RuleCall cBlockExpressionParserRuleCall_5_0_0 = (RuleCall)cBlockAlternatives_5_0.eContents().get(0);
		private final RuleCall cBlockLetStatementParserRuleCall_5_0_1 = (RuleCall)cBlockAlternatives_5_0.eContents().get(1);
		
		//LetStatement Statement:
		//	{LetStatement} 'let' bindings+=VarAssign (',' bindings+=VarAssign)* 'in' block=(Expression | LetStatement)
		@Override public ParserRule getRule() { return rule; }
		
		//{LetStatement} 'let' bindings+=VarAssign (',' bindings+=VarAssign)* 'in' block=(Expression | LetStatement)
		public Group getGroup() { return cGroup; }
		
		//{LetStatement}
		public Action getLetStatementAction_0() { return cLetStatementAction_0; }
		
		//'let'
		public Keyword getLetKeyword_1() { return cLetKeyword_1; }
		
		//bindings+=VarAssign
		public Assignment getBindingsAssignment_2() { return cBindingsAssignment_2; }
		
		//VarAssign
		public RuleCall getBindingsVarAssignParserRuleCall_2_0() { return cBindingsVarAssignParserRuleCall_2_0; }
		
		//(',' bindings+=VarAssign)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//bindings+=VarAssign
		public Assignment getBindingsAssignment_3_1() { return cBindingsAssignment_3_1; }
		
		//VarAssign
		public RuleCall getBindingsVarAssignParserRuleCall_3_1_0() { return cBindingsVarAssignParserRuleCall_3_1_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//block=(Expression | LetStatement)
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }
		
		//(Expression | LetStatement)
		public Alternatives getBlockAlternatives_5_0() { return cBlockAlternatives_5_0; }
		
		//Expression
		public RuleCall getBlockExpressionParserRuleCall_5_0_0() { return cBlockExpressionParserRuleCall_5_0_0; }
		
		//LetStatement
		public RuleCall getBlockLetStatementParserRuleCall_5_0_1() { return cBlockLetStatementParserRuleCall_5_0_1; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenBranchAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenBranchBlockParserRuleCall_5_0 = (RuleCall)cThenBranchAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseBranchAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseBranchBlockParserRuleCall_6_1_0 = (RuleCall)cElseBranchAssignment_6_1.eContents().get(0);
		
		//IfStatement Statement:
		//	{IfStatement} 'if' '(' condition=Expression ')' thenBranch=Block ('else' elseBranch=Block)?
		@Override public ParserRule getRule() { return rule; }
		
		//{IfStatement} 'if' '(' condition=Expression ')' thenBranch=Block ('else' elseBranch=Block)?
		public Group getGroup() { return cGroup; }
		
		//{IfStatement}
		public Action getIfStatementAction_0() { return cIfStatementAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//condition=Expression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_0() { return cConditionExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//thenBranch=Block
		public Assignment getThenBranchAssignment_5() { return cThenBranchAssignment_5; }
		
		//Block
		public RuleCall getThenBranchBlockParserRuleCall_5_0() { return cThenBranchBlockParserRuleCall_5_0; }
		
		//('else' elseBranch=Block)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//elseBranch=Block
		public Assignment getElseBranchAssignment_6_1() { return cElseBranchAssignment_6_1; }
		
		//Block
		public RuleCall getElseBranchBlockParserRuleCall_6_1_0() { return cElseBranchBlockParserRuleCall_6_1_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWhileBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWhileBlockBlockParserRuleCall_5_0 = (RuleCall)cWhileBlockAssignment_5.eContents().get(0);
		
		//WhileStatement Statement:
		//	{WhileStatement} 'while' '(' condition=Expression ')' whileBlock=Block
		@Override public ParserRule getRule() { return rule; }
		
		//{WhileStatement} 'while' '(' condition=Expression ')' whileBlock=Block
		public Group getGroup() { return cGroup; }
		
		//{WhileStatement}
		public Action getWhileStatementAction_0() { return cWhileStatementAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//condition=Expression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_0() { return cConditionExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//whileBlock=Block
		public Assignment getWhileBlockAssignment_5() { return cWhileBlockAssignment_5; }
		
		//Block
		public RuleCall getWhileBlockBlockParserRuleCall_5_0() { return cWhileBlockBlockParserRuleCall_5_0; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCollectionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCollectionExpressionParserRuleCall_6_0 = (RuleCall)cCollectionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		
		//ForLoop Statement:
		//	{ForLoop} 'for' '(' type=Type name=ID 'in' collection=Expression ')' block=Block
		@Override public ParserRule getRule() { return rule; }
		
		//{ForLoop} 'for' '(' type=Type name=ID 'in' collection=Expression ')' block=Block
		public Group getGroup() { return cGroup; }
		
		//{ForLoop}
		public Action getForLoopAction_0() { return cForLoopAction_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'in'
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//collection=Expression
		public Assignment getCollectionAssignment_6() { return cCollectionAssignment_6; }
		
		//Expression
		public RuleCall getCollectionExpressionParserRuleCall_6_0() { return cCollectionExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//block=Block
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_8_0() { return cBlockBlockParserRuleCall_8_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} '{' body+=Statement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' body+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//body+=Statement*
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_2_0() { return cBodyStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class VarAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.VarAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarAssignAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//VarAssign Statement:
		//	{VarAssign} type=Type name=ID '=' value=Expression
		@Override public ParserRule getRule() { return rule; }
		
		//{VarAssign} type=Type name=ID '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//{VarAssign}
		public Action getVarAssignAction_0() { return cVarAssignAction_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Expression");
		private final RuleCall cImpliesOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	ImpliesOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//ImpliesOperation
		public RuleCall getImpliesOperationParserRuleCall() { return cImpliesOperationParserRuleCall; }
	}
	public class ImpliesOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.ImpliesOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cImpliesOperationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cImpliesKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightBooleanOperationParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//ImpliesOperation Expression:
		//	BooleanOperation
		//	=> (({ImpliesOperation.left=current} 'implies') right=BooleanOperation)*
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanOperation => (({ImpliesOperation.left=current} 'implies') right=BooleanOperation)*
		public Group getGroup() { return cGroup; }
		
		//BooleanOperation
		public RuleCall getBooleanOperationParserRuleCall_0() { return cBooleanOperationParserRuleCall_0; }
		
		//=> (({ImpliesOperation.left=current} 'implies') right=BooleanOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(({ImpliesOperation.left=current} 'implies') right=BooleanOperation)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({ImpliesOperation.left=current} 'implies')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{ImpliesOperation.left=current}
		public Action getImpliesOperationLeftAction_1_0_0_0() { return cImpliesOperationLeftAction_1_0_0_0; }
		
		//'implies'
		public Keyword getImpliesKeyword_1_0_0_1() { return cImpliesKeyword_1_0_0_1; }
		
		//right=BooleanOperation
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }
		
		//BooleanOperation
		public RuleCall getRightBooleanOperationParserRuleCall_1_0_1_0() { return cRightBooleanOperationParserRuleCall_1_0_1_0; }
	}
	public class BooleanOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.BooleanOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cBooleanOrOperationLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cOrKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cBooleanAndOperationLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cAndKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Group cGroup_1_0_0_2 = (Group)cAlternatives_1_0_0.eContents().get(2);
		private final Action cBooleanXorOperationLeftAction_1_0_0_2_0 = (Action)cGroup_1_0_0_2.eContents().get(0);
		private final Keyword cXorKeyword_1_0_0_2_1 = (Keyword)cGroup_1_0_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightCompareOperationParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//BooleanOperation Expression:
		//	CompareOperation
		//	=> (({BooleanOrOperation.left=current} 'or' | {BooleanAndOperation.left=current} 'and' |
		//	{BooleanXorOperation.left=current} 'xor') right=CompareOperation)*
		@Override public ParserRule getRule() { return rule; }
		
		//CompareOperation => (({BooleanOrOperation.left=current} 'or' | {BooleanAndOperation.left=current} 'and' |
		//{BooleanXorOperation.left=current} 'xor') right=CompareOperation)*
		public Group getGroup() { return cGroup; }
		
		//CompareOperation
		public RuleCall getCompareOperationParserRuleCall_0() { return cCompareOperationParserRuleCall_0; }
		
		//=> (({BooleanOrOperation.left=current} 'or' | {BooleanAndOperation.left=current} 'and' |
		//{BooleanXorOperation.left=current} 'xor') right=CompareOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(({BooleanOrOperation.left=current} 'or' | {BooleanAndOperation.left=current} 'and' | {BooleanXorOperation.left=current}
		//'xor') right=CompareOperation)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({BooleanOrOperation.left=current} 'or' | {BooleanAndOperation.left=current} 'and' | {BooleanXorOperation.left=current}
		//'xor')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{BooleanOrOperation.left=current} 'or'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{BooleanOrOperation.left=current}
		public Action getBooleanOrOperationLeftAction_1_0_0_0_0() { return cBooleanOrOperationLeftAction_1_0_0_0_0; }
		
		//'or'
		public Keyword getOrKeyword_1_0_0_0_1() { return cOrKeyword_1_0_0_0_1; }
		
		//{BooleanAndOperation.left=current} 'and'
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{BooleanAndOperation.left=current}
		public Action getBooleanAndOperationLeftAction_1_0_0_1_0() { return cBooleanAndOperationLeftAction_1_0_0_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_0_0_1_1() { return cAndKeyword_1_0_0_1_1; }
		
		//{BooleanXorOperation.left=current} 'xor'
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//{BooleanXorOperation.left=current}
		public Action getBooleanXorOperationLeftAction_1_0_0_2_0() { return cBooleanXorOperationLeftAction_1_0_0_2_0; }
		
		//'xor'
		public Keyword getXorKeyword_1_0_0_2_1() { return cXorKeyword_1_0_0_2_1; }
		
		//right=CompareOperation
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }
		
		//CompareOperation
		public RuleCall getRightCompareOperationParserRuleCall_1_0_1_0() { return cRightCompareOperationParserRuleCall_1_0_1_0; }
	}
	public class CompareOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.CompareOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cCompareLEOperationLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cCompareGEOperationLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Group cGroup_1_0_0_2 = (Group)cAlternatives_1_0_0.eContents().get(2);
		private final Action cCompareNEOperationLeftAction_1_0_0_2_0 = (Action)cGroup_1_0_0_2.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0_2_1 = (Keyword)cGroup_1_0_0_2.eContents().get(1);
		private final Group cGroup_1_0_0_3 = (Group)cAlternatives_1_0_0.eContents().get(3);
		private final Action cCompareLOperationLeftAction_1_0_0_3_0 = (Action)cGroup_1_0_0_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_3_1 = (Keyword)cGroup_1_0_0_3.eContents().get(1);
		private final Group cGroup_1_0_0_4 = (Group)cAlternatives_1_0_0.eContents().get(4);
		private final Action cCompareGOperationLeftAction_1_0_0_4_0 = (Action)cGroup_1_0_0_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0_4_1 = (Keyword)cGroup_1_0_0_4.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightEqualityOperationParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//CompareOperation Expression:
		//	EqualityOperation
		//	=> (({CompareLEOperation.left=current} '<=' | {CompareGEOperation.left=current} '>=' |
		//	{CompareNEOperation.left=current} '!=' | {CompareLOperation.left=current} '<' | {CompareGOperation.left=current} '>')
		//	right=EqualityOperation)*
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityOperation => (({CompareLEOperation.left=current} '<=' | {CompareGEOperation.left=current} '>=' |
		//{CompareNEOperation.left=current} '!=' | {CompareLOperation.left=current} '<' | {CompareGOperation.left=current} '>')
		//right=EqualityOperation)*
		public Group getGroup() { return cGroup; }
		
		//EqualityOperation
		public RuleCall getEqualityOperationParserRuleCall_0() { return cEqualityOperationParserRuleCall_0; }
		
		//=> (({CompareLEOperation.left=current} '<=' | {CompareGEOperation.left=current} '>=' | {CompareNEOperation.left=current}
		//'!=' | {CompareLOperation.left=current} '<' | {CompareGOperation.left=current} '>') right=EqualityOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(({CompareLEOperation.left=current} '<=' | {CompareGEOperation.left=current} '>=' | {CompareNEOperation.left=current}
		//'!=' | {CompareLOperation.left=current} '<' | {CompareGOperation.left=current} '>') right=EqualityOperation)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({CompareLEOperation.left=current} '<=' | {CompareGEOperation.left=current} '>=' | {CompareNEOperation.left=current}
		//'!=' | {CompareLOperation.left=current} '<' | {CompareGOperation.left=current} '>')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{CompareLEOperation.left=current} '<='
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{CompareLEOperation.left=current}
		public Action getCompareLEOperationLeftAction_1_0_0_0_0() { return cCompareLEOperationLeftAction_1_0_0_0_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_0_0_1() { return cLessThanSignEqualsSignKeyword_1_0_0_0_1; }
		
		//{CompareGEOperation.left=current} '>='
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{CompareGEOperation.left=current}
		public Action getCompareGEOperationLeftAction_1_0_0_1_0() { return cCompareGEOperationLeftAction_1_0_0_1_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_0_1_1() { return cGreaterThanSignEqualsSignKeyword_1_0_0_1_1; }
		
		//{CompareNEOperation.left=current} '!='
		public Group getGroup_1_0_0_2() { return cGroup_1_0_0_2; }
		
		//{CompareNEOperation.left=current}
		public Action getCompareNEOperationLeftAction_1_0_0_2_0() { return cCompareNEOperationLeftAction_1_0_0_2_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0_2_1() { return cExclamationMarkEqualsSignKeyword_1_0_0_2_1; }
		
		//{CompareLOperation.left=current} '<'
		public Group getGroup_1_0_0_3() { return cGroup_1_0_0_3; }
		
		//{CompareLOperation.left=current}
		public Action getCompareLOperationLeftAction_1_0_0_3_0() { return cCompareLOperationLeftAction_1_0_0_3_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0_3_1() { return cLessThanSignKeyword_1_0_0_3_1; }
		
		//{CompareGOperation.left=current} '>'
		public Group getGroup_1_0_0_4() { return cGroup_1_0_0_4; }
		
		//{CompareGOperation.left=current}
		public Action getCompareGOperationLeftAction_1_0_0_4_0() { return cCompareGOperationLeftAction_1_0_0_4_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_0_4_1() { return cGreaterThanSignKeyword_1_0_0_4_1; }
		
		//right=EqualityOperation
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }
		
		//EqualityOperation
		public RuleCall getRightEqualityOperationParserRuleCall_1_0_1_0() { return cRightEqualityOperationParserRuleCall_1_0_1_0; }
	}
	public class EqualityOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.EqualityOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cEqualityOperationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMultOperationParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//EqualityOperation Expression:
		//	MultOperation
		//	=> ({EqualityOperation.left=current} op='==' right=MultOperation)*
		@Override public ParserRule getRule() { return rule; }
		
		//MultOperation => ({EqualityOperation.left=current} op='==' right=MultOperation)*
		public Group getGroup() { return cGroup; }
		
		//MultOperation
		public RuleCall getMultOperationParserRuleCall_0() { return cMultOperationParserRuleCall_0; }
		
		//=> ({EqualityOperation.left=current} op='==' right=MultOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({EqualityOperation.left=current} op='==' right=MultOperation)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{EqualityOperation.left=current}
		public Action getEqualityOperationLeftAction_1_0_0() { return cEqualityOperationLeftAction_1_0_0; }
		
		//op='=='
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_1_0() { return cOpEqualsSignEqualsSignKeyword_1_0_1_0; }
		
		//right=MultOperation
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//MultOperation
		public RuleCall getRightMultOperationParserRuleCall_1_0_2_0() { return cRightMultOperationParserRuleCall_1_0_2_0; }
	}
	public class MultOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.MultOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cMultOperationLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cDivOperationLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightAddOperationParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//MultOperation Expression:
		//	AddOperation
		//	=> (({MultOperation.left=current} '*' | {DivOperation.left=current} '/') right=AddOperation)*
		@Override public ParserRule getRule() { return rule; }
		
		//AddOperation => (({MultOperation.left=current} '*' | {DivOperation.left=current} '/') right=AddOperation)*
		public Group getGroup() { return cGroup; }
		
		//AddOperation
		public RuleCall getAddOperationParserRuleCall_0() { return cAddOperationParserRuleCall_0; }
		
		//=> (({MultOperation.left=current} '*' | {DivOperation.left=current} '/') right=AddOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(({MultOperation.left=current} '*' | {DivOperation.left=current} '/') right=AddOperation)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({MultOperation.left=current} '*' | {DivOperation.left=current} '/')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{MultOperation.left=current} '*'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{MultOperation.left=current}
		public Action getMultOperationLeftAction_1_0_0_0_0() { return cMultOperationLeftAction_1_0_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0_1() { return cAsteriskKeyword_1_0_0_0_1; }
		
		//{DivOperation.left=current} '/'
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{DivOperation.left=current}
		public Action getDivOperationLeftAction_1_0_0_1_0() { return cDivOperationLeftAction_1_0_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_0_1_1() { return cSolidusKeyword_1_0_0_1_1; }
		
		//right=AddOperation
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }
		
		//AddOperation
		public RuleCall getRightAddOperationParserRuleCall_1_0_1_0() { return cRightAddOperationParserRuleCall_1_0_1_0; }
	}
	public class AddOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.AddOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cChaindedCallParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cAddOperationLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cSubOperationLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightChaindedCallParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//AddOperation Expression:
		//	ChaindedCall
		//	=> (({AddOperation.left=current} '+' | {SubOperation.left=current} '-') right=ChaindedCall)*
		@Override public ParserRule getRule() { return rule; }
		
		//ChaindedCall => (({AddOperation.left=current} '+' | {SubOperation.left=current} '-') right=ChaindedCall)*
		public Group getGroup() { return cGroup; }
		
		//ChaindedCall
		public RuleCall getChaindedCallParserRuleCall_0() { return cChaindedCallParserRuleCall_0; }
		
		//=> (({AddOperation.left=current} '+' | {SubOperation.left=current} '-') right=ChaindedCall)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(({AddOperation.left=current} '+' | {SubOperation.left=current} '-') right=ChaindedCall)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({AddOperation.left=current} '+' | {SubOperation.left=current} '-')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{AddOperation.left=current} '+'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{AddOperation.left=current}
		public Action getAddOperationLeftAction_1_0_0_0_0() { return cAddOperationLeftAction_1_0_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0_1() { return cPlusSignKeyword_1_0_0_0_1; }
		
		//{SubOperation.left=current} '-'
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{SubOperation.left=current}
		public Action getSubOperationLeftAction_1_0_0_1_0() { return cSubOperationLeftAction_1_0_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0_1_1() { return cHyphenMinusKeyword_1_0_0_1_1; }
		
		//right=ChaindedCall
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }
		
		//ChaindedCall
		public RuleCall getRightChaindedCallParserRuleCall_1_0_1_0() { return cRightChaindedCallParserRuleCall_1_0_1_0; }
	}
	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Symbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParamParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Symbol:
		//	VarAssign | Field | Param;
		@Override public ParserRule getRule() { return rule; }
		
		//VarAssign | Field | Param
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarAssign
		public RuleCall getVarAssignParserRuleCall_0() { return cVarAssignParserRuleCall_0; }
		
		//Field
		public RuleCall getFieldParserRuleCall_1() { return cFieldParserRuleCall_1; }
		
		//Param
		public RuleCall getParamParserRuleCall_2() { return cParamParserRuleCall_2; }
	}
	public class ChaindedCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.ChaindedCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInfixOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cChainedCallLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cChainedCallArrowLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightInfixOperationParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//ChaindedCall Expression:
		//	InfixOperation
		//	=> (({ChainedCall.left=current} '.' | {ChainedCallArrow.left=current} '->') right=InfixOperation)*
		@Override public ParserRule getRule() { return rule; }
		
		//InfixOperation => (({ChainedCall.left=current} '.' | {ChainedCallArrow.left=current} '->') right=InfixOperation)*
		public Group getGroup() { return cGroup; }
		
		//InfixOperation
		public RuleCall getInfixOperationParserRuleCall_0() { return cInfixOperationParserRuleCall_0; }
		
		//=> (({ChainedCall.left=current} '.' | {ChainedCallArrow.left=current} '->') right=InfixOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(({ChainedCall.left=current} '.' | {ChainedCallArrow.left=current} '->') right=InfixOperation)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({ChainedCall.left=current} '.' | {ChainedCallArrow.left=current} '->')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//{ChainedCall.left=current} '.'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{ChainedCall.left=current}
		public Action getChainedCallLeftAction_1_0_0_0_0() { return cChainedCallLeftAction_1_0_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }
		
		//{ChainedCallArrow.left=current} '->'
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//{ChainedCallArrow.left=current}
		public Action getChainedCallArrowLeftAction_1_0_0_1_0() { return cChainedCallArrowLeftAction_1_0_0_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_0_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_0_1_1; }
		
		//right=InfixOperation
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }
		
		//InfixOperation
		public RuleCall getRightInfixOperationParserRuleCall_1_0_1_0() { return cRightInfixOperationParserRuleCall_1_0_1_0; }
	}
	public class InfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.InfixOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotInfixOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNegInfixOperationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cConstructorOperationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNewKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOperationCallOperationAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Group cGroup_3_2_1 = (Group)cGroup_3_2.eContents().get(1);
		private final Assignment cParametersAssignment_3_2_1_0 = (Assignment)cGroup_3_2_1.eContents().get(0);
		private final RuleCall cParametersParamCallParserRuleCall_3_2_1_0_0 = (RuleCall)cParametersAssignment_3_2_1_0.eContents().get(0);
		private final Group cGroup_3_2_1_1 = (Group)cGroup_3_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_2_1_1_0 = (Keyword)cGroup_3_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_1_1_1 = (Assignment)cGroup_3_2_1_1.eContents().get(1);
		private final RuleCall cParametersParamCallParserRuleCall_3_2_1_1_1_0 = (RuleCall)cParametersAssignment_3_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final RuleCall cAtomicLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//InfixOperation Expression:
		//	{NotInfixOperation} 'not' expression=Expression | {NegInfixOperation} '-' expression=Expression |
		//	{ConstructorOperation} 'new' name=ID '(' ')' | {OperationCallOperation} name=ID ('(' (parameters+=ParamCall (','
		//	parameters+=ParamCall)*)? ')') | AtomicLiteral
		@Override public ParserRule getRule() { return rule; }
		
		//{NotInfixOperation} 'not' expression=Expression | {NegInfixOperation} '-' expression=Expression | {ConstructorOperation}
		//'new' name=ID '(' ')' | {OperationCallOperation} name=ID ('(' (parameters+=ParamCall (',' parameters+=ParamCall)*)?
		//')') | AtomicLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NotInfixOperation} 'not' expression=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//{NotInfixOperation}
		public Action getNotInfixOperationAction_0_0() { return cNotInfixOperationAction_0_0; }
		
		//'not'
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//{NegInfixOperation} '-' expression=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//{NegInfixOperation}
		public Action getNegInfixOperationAction_1_0() { return cNegInfixOperationAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
		
		//{ConstructorOperation} 'new' name=ID '(' ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{ConstructorOperation}
		public Action getConstructorOperationAction_2_0() { return cConstructorOperationAction_2_0; }
		
		//'new'
		public Keyword getNewKeyword_2_1() { return cNewKeyword_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_0() { return cNameIDTerminalRuleCall_2_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_3() { return cLeftParenthesisKeyword_2_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//{OperationCallOperation} name=ID ('(' (parameters+=ParamCall (',' parameters+=ParamCall)*)? ')')
		public Group getGroup_3() { return cGroup_3; }
		
		//{OperationCallOperation}
		public Action getOperationCallOperationAction_3_0() { return cOperationCallOperationAction_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
		
		//('(' (parameters+=ParamCall (',' parameters+=ParamCall)*)? ')')
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2_0() { return cLeftParenthesisKeyword_3_2_0; }
		
		//(parameters+=ParamCall (',' parameters+=ParamCall)*)?
		public Group getGroup_3_2_1() { return cGroup_3_2_1; }
		
		//parameters+=ParamCall
		public Assignment getParametersAssignment_3_2_1_0() { return cParametersAssignment_3_2_1_0; }
		
		//ParamCall
		public RuleCall getParametersParamCallParserRuleCall_3_2_1_0_0() { return cParametersParamCallParserRuleCall_3_2_1_0_0; }
		
		//(',' parameters+=ParamCall)*
		public Group getGroup_3_2_1_1() { return cGroup_3_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_2_1_1_0() { return cCommaKeyword_3_2_1_1_0; }
		
		//parameters+=ParamCall
		public Assignment getParametersAssignment_3_2_1_1_1() { return cParametersAssignment_3_2_1_1_1; }
		
		//ParamCall
		public RuleCall getParametersParamCallParserRuleCall_3_2_1_1_1_0() { return cParametersParamCallParserRuleCall_3_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2_2() { return cRightParenthesisKeyword_3_2_2; }
		
		//AtomicLiteral
		public RuleCall getAtomicLiteralParserRuleCall_4() { return cAtomicLiteralParserRuleCall_4; }
	}
	public class ParamCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.ParamCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLambdaAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLambdaIDTerminalRuleCall_0_0_0 = (RuleCall)cLambdaAssignment_0_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ParamCall:
		//	(lambda=ID '|')? expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(lambda=ID '|')? expression=Expression
		public Group getGroup() { return cGroup; }
		
		//(lambda=ID '|')?
		public Group getGroup_0() { return cGroup_0; }
		
		//lambda=ID
		public Assignment getLambdaAssignment_0_0() { return cLambdaAssignment_0_0; }
		
		//ID
		public RuleCall getLambdaIDTerminalRuleCall_0_0_0() { return cLambdaIDTerminalRuleCall_0_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0_1() { return cVerticalLineKeyword_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class AtomicLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.AtomicLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSelfRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSelfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSuperRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSuperKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIntLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cRealLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cBooleanLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cNullLiteralAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final RuleCall cNULLTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cIntRangeAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cStartAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cStartExpressionParserRuleCall_8_2_0 = (RuleCall)cStartAssignment_8_2.eContents().get(0);
		private final Keyword cFullStopKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cFullStopKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Assignment cStopAssignment_8_5 = (Assignment)cGroup_8.eContents().get(5);
		private final RuleCall cStopExpressionParserRuleCall_8_5_0 = (RuleCall)cStopAssignment_8_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_6 = (Keyword)cGroup_8.eContents().get(6);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cSequenceDeclAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cSequenceKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Assignment cExpressionsAssignment_9_3_0 = (Assignment)cGroup_9_3.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_9_3_0_0 = (RuleCall)cExpressionsAssignment_9_3_0.eContents().get(0);
		private final Group cGroup_9_3_1 = (Group)cGroup_9_3.eContents().get(1);
		private final Keyword cCommaKeyword_9_3_1_0 = (Keyword)cGroup_9_3_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_9_3_1_1 = (Assignment)cGroup_9_3_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_9_3_1_1_0 = (RuleCall)cExpressionsAssignment_9_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cOrderedSetDeclAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cOrderedSetKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Assignment cExpressionsAssignment_10_3_0 = (Assignment)cGroup_10_3.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_10_3_0_0 = (RuleCall)cExpressionsAssignment_10_3_0.eContents().get(0);
		private final Group cGroup_10_3_1 = (Group)cGroup_10_3.eContents().get(1);
		private final Keyword cCommaKeyword_10_3_1_0 = (Keyword)cGroup_10_3_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_10_3_1_1 = (Assignment)cGroup_10_3_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_10_3_1_1_0 = (RuleCall)cExpressionsAssignment_10_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cVarRefAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cValueAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_11_1_0 = (RuleCall)cValueAssignment_11_1.eContents().get(0);
		
		//AtomicLiteral Expression:
		//	'(' Expression ')' | {SelfRef} 'self' | {SuperRef} 'super' | {StringLiteral} value=STRING | {IntLiteral} value=INT |
		//	{RealLiteral} value=REAL | {BooleanLiteral} value=BOOLEAN | {NullLiteral} NULL | {IntRange} '[' start=Expression '.'
		//	'.' stop=Expression ']' | {SequenceDecl} 'Sequence' '{' (expressions+=Expression (',' expressions+=Expression)*)? '}'
		//	| {OrderedSetDecl} 'OrderedSet' '{' (expressions+=Expression (',' expressions+=Expression)*)? '}' | {VarRef} value=ID
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {SelfRef} 'self' | {SuperRef} 'super' | {StringLiteral} value=STRING | {IntLiteral} value=INT |
		//{RealLiteral} value=REAL | {BooleanLiteral} value=BOOLEAN | {NullLiteral} NULL | {IntRange} '[' start=Expression '.'
		//'.' stop=Expression ']' | {SequenceDecl} 'Sequence' '{' (expressions+=Expression (',' expressions+=Expression)*)? '}' |
		//{OrderedSetDecl} 'OrderedSet' '{' (expressions+=Expression (',' expressions+=Expression)*)? '}' | {VarRef} value=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{SelfRef} 'self'
		public Group getGroup_1() { return cGroup_1; }
		
		//{SelfRef}
		public Action getSelfRefAction_1_0() { return cSelfRefAction_1_0; }
		
		//'self'
		public Keyword getSelfKeyword_1_1() { return cSelfKeyword_1_1; }
		
		//{SuperRef} 'super'
		public Group getGroup_2() { return cGroup_2; }
		
		//{SuperRef}
		public Action getSuperRefAction_2_0() { return cSuperRefAction_2_0; }
		
		//'super'
		public Keyword getSuperKeyword_2_1() { return cSuperKeyword_2_1; }
		
		//{StringLiteral} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_3_0() { return cStringLiteralAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//{IntLiteral} value=INT
		public Group getGroup_4() { return cGroup_4; }
		
		//{IntLiteral}
		public Action getIntLiteralAction_4_0() { return cIntLiteralAction_4_0; }
		
		//value=INT
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_4_1_0() { return cValueINTTerminalRuleCall_4_1_0; }
		
		//{RealLiteral} value=REAL
		public Group getGroup_5() { return cGroup_5; }
		
		//{RealLiteral}
		public Action getRealLiteralAction_5_0() { return cRealLiteralAction_5_0; }
		
		//value=REAL
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_5_1_0() { return cValueREALTerminalRuleCall_5_1_0; }
		
		//{BooleanLiteral} value=BOOLEAN
		public Group getGroup_6() { return cGroup_6; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_6_0() { return cBooleanLiteralAction_6_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_6_1_0() { return cValueBOOLEANTerminalRuleCall_6_1_0; }
		
		//{NullLiteral} NULL
		public Group getGroup_7() { return cGroup_7; }
		
		//{NullLiteral}
		public Action getNullLiteralAction_7_0() { return cNullLiteralAction_7_0; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_7_1() { return cNULLTerminalRuleCall_7_1; }
		
		//{IntRange} '[' start=Expression '.' '.' stop=Expression ']'
		public Group getGroup_8() { return cGroup_8; }
		
		//{IntRange}
		public Action getIntRangeAction_8_0() { return cIntRangeAction_8_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_1() { return cLeftSquareBracketKeyword_8_1; }
		
		//start=Expression
		public Assignment getStartAssignment_8_2() { return cStartAssignment_8_2; }
		
		//Expression
		public RuleCall getStartExpressionParserRuleCall_8_2_0() { return cStartExpressionParserRuleCall_8_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_8_3() { return cFullStopKeyword_8_3; }
		
		//'.'
		public Keyword getFullStopKeyword_8_4() { return cFullStopKeyword_8_4; }
		
		//stop=Expression
		public Assignment getStopAssignment_8_5() { return cStopAssignment_8_5; }
		
		//Expression
		public RuleCall getStopExpressionParserRuleCall_8_5_0() { return cStopExpressionParserRuleCall_8_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_6() { return cRightSquareBracketKeyword_8_6; }
		
		//{SequenceDecl} 'Sequence' '{' (expressions+=Expression (',' expressions+=Expression)*)? '}'
		public Group getGroup_9() { return cGroup_9; }
		
		//{SequenceDecl}
		public Action getSequenceDeclAction_9_0() { return cSequenceDeclAction_9_0; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_9_1() { return cSequenceKeyword_9_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_2() { return cLeftCurlyBracketKeyword_9_2; }
		
		//(expressions+=Expression (',' expressions+=Expression)*)?
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_9_3_0() { return cExpressionsAssignment_9_3_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_9_3_0_0() { return cExpressionsExpressionParserRuleCall_9_3_0_0; }
		
		//(',' expressions+=Expression)*
		public Group getGroup_9_3_1() { return cGroup_9_3_1; }
		
		//','
		public Keyword getCommaKeyword_9_3_1_0() { return cCommaKeyword_9_3_1_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_9_3_1_1() { return cExpressionsAssignment_9_3_1_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_9_3_1_1_0() { return cExpressionsExpressionParserRuleCall_9_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_4() { return cRightCurlyBracketKeyword_9_4; }
		
		//{OrderedSetDecl} 'OrderedSet' '{' (expressions+=Expression (',' expressions+=Expression)*)? '}'
		public Group getGroup_10() { return cGroup_10; }
		
		//{OrderedSetDecl}
		public Action getOrderedSetDeclAction_10_0() { return cOrderedSetDeclAction_10_0; }
		
		//'OrderedSet'
		public Keyword getOrderedSetKeyword_10_1() { return cOrderedSetKeyword_10_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10_2() { return cLeftCurlyBracketKeyword_10_2; }
		
		//(expressions+=Expression (',' expressions+=Expression)*)?
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_10_3_0() { return cExpressionsAssignment_10_3_0; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_10_3_0_0() { return cExpressionsExpressionParserRuleCall_10_3_0_0; }
		
		//(',' expressions+=Expression)*
		public Group getGroup_10_3_1() { return cGroup_10_3_1; }
		
		//','
		public Keyword getCommaKeyword_10_3_1_0() { return cCommaKeyword_10_3_1_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_10_3_1_1() { return cExpressionsAssignment_10_3_1_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_10_3_1_1_0() { return cExpressionsExpressionParserRuleCall_10_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10_4() { return cRightCurlyBracketKeyword_10_4; }
		
		//{VarRef} value=ID
		public Group getGroup_11() { return cGroup_11; }
		
		//{VarRef}
		public Action getVarRefAction_11_0() { return cVarRefAction_11_0; }
		
		//value=ID
		public Assignment getValueAssignment_11_1() { return cValueAssignment_11_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_11_1_0() { return cValueIDTerminalRuleCall_11_1_0; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Param:
		//	type=Type name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutOfScopeTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExternalClassAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExternalClassIDTerminalRuleCall_1_1_0 = (RuleCall)cExternalClassAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSequenceTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSequenceKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cSubTypeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cSubTypeTypeParserRuleCall_2_3_0 = (RuleCall)cSubTypeAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOrderedSetTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cOrderedSetKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSubTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cSubTypeTypeParserRuleCall_3_3_0 = (RuleCall)cSubTypeAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//Type:
		//	LiteralType | {OutOfScopeType} externalClass=ID | {SequenceType} 'Sequence' '(' subType=Type ')' | {OrderedSetType}
		//	'OrderedSet' '(' subType=Type ')';
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralType | {OutOfScopeType} externalClass=ID | {SequenceType} 'Sequence' '(' subType=Type ')' | {OrderedSetType}
		//'OrderedSet' '(' subType=Type ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralType
		public RuleCall getLiteralTypeParserRuleCall_0() { return cLiteralTypeParserRuleCall_0; }
		
		//{OutOfScopeType} externalClass=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//{OutOfScopeType}
		public Action getOutOfScopeTypeAction_1_0() { return cOutOfScopeTypeAction_1_0; }
		
		//externalClass=ID
		public Assignment getExternalClassAssignment_1_1() { return cExternalClassAssignment_1_1; }
		
		//ID
		public RuleCall getExternalClassIDTerminalRuleCall_1_1_0() { return cExternalClassIDTerminalRuleCall_1_1_0; }
		
		//{SequenceType} 'Sequence' '(' subType=Type ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{SequenceType}
		public Action getSequenceTypeAction_2_0() { return cSequenceTypeAction_2_0; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_2_1() { return cSequenceKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//subType=Type
		public Assignment getSubTypeAssignment_2_3() { return cSubTypeAssignment_2_3; }
		
		//Type
		public RuleCall getSubTypeTypeParserRuleCall_2_3_0() { return cSubTypeTypeParserRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//{OrderedSetType} 'OrderedSet' '(' subType=Type ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{OrderedSetType}
		public Action getOrderedSetTypeAction_3_0() { return cOrderedSetTypeAction_3_0; }
		
		//'OrderedSet'
		public Keyword getOrderedSetKeyword_3_1() { return cOrderedSetKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//subType=Type
		public Assignment getSubTypeAssignment_3_3() { return cSubTypeAssignment_3_3; }
		
		//Type
		public RuleCall getSubTypeTypeParserRuleCall_3_3_0() { return cSubTypeTypeParserRuleCall_3_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}
	public class LiteralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.LiteralType");
		private final Assignment cLitAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cLitAlternatives_0 = (Alternatives)cLitAssignment.eContents().get(0);
		private final Keyword cLitBooleanKeyword_0_0 = (Keyword)cLitAlternatives_0.eContents().get(0);
		private final Keyword cLitRealKeyword_0_1 = (Keyword)cLitAlternatives_0.eContents().get(1);
		private final Keyword cLitIntKeyword_0_2 = (Keyword)cLitAlternatives_0.eContents().get(2);
		private final Keyword cLitStringKeyword_0_3 = (Keyword)cLitAlternatives_0.eContents().get(3);
		
		//// TODO: Type pipe ?
		////ClassType:
		////	refType=[Class];
		//LiteralType:
		//	lit=('Boolean' |
		//	//	'Byte' | 'Char' | 'Double' | 'Float' | 
		//	//	'Long' | 'Short' |
		//
		//	'Real' |
		//	'Int' |
		//	'String');
		@Override public ParserRule getRule() { return rule; }
		
		//lit=('Boolean' | //	'Byte' | 'Char' | 'Double' | 'Float' | 
		////	'Long' | 'Short' |
		//'Real' | 'Int' | 'String')
		public Assignment getLitAssignment() { return cLitAssignment; }
		
		//('Boolean' | //	'Byte' | 'Char' | 'Double' | 'Float' | 
		////	'Long' | 'Short' |
		//'Real' | 'Int' | 'String')
		public Alternatives getLitAlternatives_0() { return cLitAlternatives_0; }
		
		//'Boolean'
		public Keyword getLitBooleanKeyword_0_0() { return cLitBooleanKeyword_0_0; }
		
		////	'Byte' | 'Char' | 'Double' | 'Float' | 
		////	'Long' | 'Short' |
		//'Real'
		public Keyword getLitRealKeyword_0_1() { return cLitRealKeyword_0_1; }
		
		//'Int'
		public Keyword getLitIntKeyword_0_2() { return cLitIntKeyword_0_2; }
		
		//'String'
		public Keyword getLitStringKeyword_0_3() { return cLitStringKeyword_0_3; }
	}
	public class QualifiedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.Qualified");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Qualified:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class TypeSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.TypeSystem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanTypeTAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBooleanKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRealTypeTAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRealKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntTypeTAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cIntKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringTypeTAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cStringKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNullTypeTAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNulltypeKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSequenceTypeTAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cSequenceKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cSubTypeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSubTypeTypeSystemParserRuleCall_5_2_0 = (RuleCall)cSubTypeAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cClassTypeTAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cClassKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cClazzAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cClazzAleClassCrossReference_6_2_0 = (CrossReference)cClazzAssignment_6_2.eContents().get(0);
		private final RuleCall cClazzAleClassIDTerminalRuleCall_6_2_0_1 = (RuleCall)cClazzAleClassCrossReference_6_2_0.eContents().get(1);
		
		//// Type system
		//TypeSystem:
		//	{BooleanTypeT} 'Boolean' | {RealTypeT} 'Real' | {IntTypeT} 'Int' | {StringTypeT} 'String' | {NullTypeT} 'nulltype' |
		//	{SequenceTypeT} 'Sequence' subType=TypeSystem | {ClassTypeT} 'class' clazz=[AleClass];
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanTypeT} 'Boolean' | {RealTypeT} 'Real' | {IntTypeT} 'Int' | {StringTypeT} 'String' | {NullTypeT} 'nulltype' |
		//{SequenceTypeT} 'Sequence' subType=TypeSystem | {ClassTypeT} 'class' clazz=[AleClass]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanTypeT} 'Boolean'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanTypeT}
		public Action getBooleanTypeTAction_0_0() { return cBooleanTypeTAction_0_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_0_1() { return cBooleanKeyword_0_1; }
		
		//{RealTypeT} 'Real'
		public Group getGroup_1() { return cGroup_1; }
		
		//{RealTypeT}
		public Action getRealTypeTAction_1_0() { return cRealTypeTAction_1_0; }
		
		//'Real'
		public Keyword getRealKeyword_1_1() { return cRealKeyword_1_1; }
		
		//{IntTypeT} 'Int'
		public Group getGroup_2() { return cGroup_2; }
		
		//{IntTypeT}
		public Action getIntTypeTAction_2_0() { return cIntTypeTAction_2_0; }
		
		//'Int'
		public Keyword getIntKeyword_2_1() { return cIntKeyword_2_1; }
		
		//{StringTypeT} 'String'
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringTypeT}
		public Action getStringTypeTAction_3_0() { return cStringTypeTAction_3_0; }
		
		//'String'
		public Keyword getStringKeyword_3_1() { return cStringKeyword_3_1; }
		
		//{NullTypeT} 'nulltype'
		public Group getGroup_4() { return cGroup_4; }
		
		//{NullTypeT}
		public Action getNullTypeTAction_4_0() { return cNullTypeTAction_4_0; }
		
		//'nulltype'
		public Keyword getNulltypeKeyword_4_1() { return cNulltypeKeyword_4_1; }
		
		//{SequenceTypeT} 'Sequence' subType=TypeSystem
		public Group getGroup_5() { return cGroup_5; }
		
		//{SequenceTypeT}
		public Action getSequenceTypeTAction_5_0() { return cSequenceTypeTAction_5_0; }
		
		//'Sequence'
		public Keyword getSequenceKeyword_5_1() { return cSequenceKeyword_5_1; }
		
		//subType=TypeSystem
		public Assignment getSubTypeAssignment_5_2() { return cSubTypeAssignment_5_2; }
		
		//TypeSystem
		public RuleCall getSubTypeTypeSystemParserRuleCall_5_2_0() { return cSubTypeTypeSystemParserRuleCall_5_2_0; }
		
		//{ClassTypeT} 'class' clazz=[AleClass]
		public Group getGroup_6() { return cGroup_6; }
		
		//{ClassTypeT}
		public Action getClassTypeTAction_6_0() { return cClassTypeTAction_6_0; }
		
		//'class'
		public Keyword getClassKeyword_6_1() { return cClassKeyword_6_1; }
		
		//clazz=[AleClass]
		public Assignment getClazzAssignment_6_2() { return cClazzAssignment_6_2; }
		
		//[AleClass]
		public CrossReference getClazzAleClassCrossReference_6_2_0() { return cClazzAleClassCrossReference_6_2_0; }
		
		//ID
		public RuleCall getClazzAleClassIDTerminalRuleCall_6_2_0_1() { return cClazzAleClassIDTerminalRuleCall_6_2_0_1; }
	}
	
	
	private final RootElements pRoot;
	private final ImportElements pImport;
	private final AleClassElements pAleClass;
	private final TagElements pTag;
	private final OpenClassElements pOpenClass;
	private final NewClassElements pNewClass;
	private final FieldElements pField;
	private final MethodElements pMethod;
	private final DefMethodElements pDefMethod;
	private final OverrideMethodElements pOverrideMethod;
	private final StatementElements pStatement;
	private final ReturnStatementElements pReturnStatement;
	private final LetStatementElements pLetStatement;
	private final IfStatementElements pIfStatement;
	private final WhileStatementElements pWhileStatement;
	private final ForLoopElements pForLoop;
	private final BlockElements pBlock;
	private final VarAssignElements pVarAssign;
	private final ExpressionElements pExpression;
	private final ImpliesOperationElements pImpliesOperation;
	private final BooleanOperationElements pBooleanOperation;
	private final CompareOperationElements pCompareOperation;
	private final EqualityOperationElements pEqualityOperation;
	private final MultOperationElements pMultOperation;
	private final AddOperationElements pAddOperation;
	private final SymbolElements pSymbol;
	private final ChaindedCallElements pChaindedCall;
	private final InfixOperationElements pInfixOperation;
	private final ParamCallElements pParamCall;
	private final AtomicLiteralElements pAtomicLiteral;
	private final ParamElements pParam;
	private final TypeElements pType;
	private final LiteralTypeElements pLiteralType;
	private final QualifiedElements pQualified;
	private final TerminalRule tREAL;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tNULL;
	private final TypeSystemElements pTypeSystem;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pImport = new ImportElements();
		this.pAleClass = new AleClassElements();
		this.pTag = new TagElements();
		this.pOpenClass = new OpenClassElements();
		this.pNewClass = new NewClassElements();
		this.pField = new FieldElements();
		this.pMethod = new MethodElements();
		this.pDefMethod = new DefMethodElements();
		this.pOverrideMethod = new OverrideMethodElements();
		this.pStatement = new StatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pLetStatement = new LetStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForLoop = new ForLoopElements();
		this.pBlock = new BlockElements();
		this.pVarAssign = new VarAssignElements();
		this.pExpression = new ExpressionElements();
		this.pImpliesOperation = new ImpliesOperationElements();
		this.pBooleanOperation = new BooleanOperationElements();
		this.pCompareOperation = new CompareOperationElements();
		this.pEqualityOperation = new EqualityOperationElements();
		this.pMultOperation = new MultOperationElements();
		this.pAddOperation = new AddOperationElements();
		this.pSymbol = new SymbolElements();
		this.pChaindedCall = new ChaindedCallElements();
		this.pInfixOperation = new InfixOperationElements();
		this.pParamCall = new ParamCallElements();
		this.pAtomicLiteral = new AtomicLiteralElements();
		this.pParam = new ParamElements();
		this.pType = new TypeElements();
		this.pLiteralType = new LiteralTypeElements();
		this.pQualified = new QualifiedElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.REAL");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.BOOLEAN");
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ale.xtext.Ale.NULL");
		this.pTypeSystem = new TypeSystemElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ale.xtext.Ale".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	'behavior' name=Qualified ';'
	//	imports+=Import*
	//	classes+=AleClass*;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}
	
	//Import:
	//	'import' ref=[Root] 'as' name=ID ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//AleClass:
	//	OpenClass | NewClass;
	public AleClassElements getAleClassAccess() {
		return pAleClass;
	}
	
	public ParserRule getAleClassRule() {
		return getAleClassAccess().getRule();
	}
	
	//Tag:
	//	'@' ID;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//OpenClass AleClass:
	//	{OpenClass} 'open' 'class' name=ID ('extends' superClass+=[AleClass|Qualified] (','
	//	superClass+=[AleClass|Qualified])*)? ('{'
	//	fields+=Field*
	//	methods+=Method*
	//	'}')
	public OpenClassElements getOpenClassAccess() {
		return pOpenClass;
	}
	
	public ParserRule getOpenClassRule() {
		return getOpenClassAccess().getRule();
	}
	
	//NewClass AleClass:
	//	{NewClass} 'class' name=ID ('extends' superClass+=[AleClass|Qualified] (',' superClass+=[AleClass|Qualified])*)? ('{'
	//	fields+=Field*
	//	methods+=Method*
	//	'}')
	public NewClassElements getNewClassAccess() {
		return pNewClass;
	}
	
	public ParserRule getNewClassRule() {
		return getNewClassAccess().getRule();
	}
	
	//Field:
	//	type=Type name=ID ';';
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Method:
	//	DefMethod | OverrideMethod;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//DefMethod:
	//	tags+=Tag* 'def' (type=Type | 'void') name=ID ('(' (params+=Param (',' params+=Param)*)? ')') block=Block;
	public DefMethodElements getDefMethodAccess() {
		return pDefMethod;
	}
	
	public ParserRule getDefMethodRule() {
		return getDefMethodAccess().getRule();
	}
	
	//OverrideMethod:
	//	tags+=Tag* 'override' type=Type name=ID ('(' (params+=Param (',' params+=Param)*)? ')') block=Block;
	public OverrideMethodElements getOverrideMethodAccess() {
		return pOverrideMethod;
	}
	
	public ParserRule getOverrideMethodRule() {
		return getOverrideMethodAccess().getRule();
	}
	
	//Statement:
	//	VarAssign ';' | ForLoop | IfStatement | WhileStatement | LetStatement ';' | ReturnStatement ';' | Expression ';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ReturnStatement Statement:
	//	{ReturnStatement} 'return' returned=Expression
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//LetStatement Statement:
	//	{LetStatement} 'let' bindings+=VarAssign (',' bindings+=VarAssign)* 'in' block=(Expression | LetStatement)
	public LetStatementElements getLetStatementAccess() {
		return pLetStatement;
	}
	
	public ParserRule getLetStatementRule() {
		return getLetStatementAccess().getRule();
	}
	
	//IfStatement Statement:
	//	{IfStatement} 'if' '(' condition=Expression ')' thenBranch=Block ('else' elseBranch=Block)?
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//WhileStatement Statement:
	//	{WhileStatement} 'while' '(' condition=Expression ')' whileBlock=Block
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//ForLoop Statement:
	//	{ForLoop} 'for' '(' type=Type name=ID 'in' collection=Expression ')' block=Block
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//Block:
	//	{Block} '{' body+=Statement* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//VarAssign Statement:
	//	{VarAssign} type=Type name=ID '=' value=Expression
	public VarAssignElements getVarAssignAccess() {
		return pVarAssign;
	}
	
	public ParserRule getVarAssignRule() {
		return getVarAssignAccess().getRule();
	}
	
	//Expression:
	//	ImpliesOperation;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ImpliesOperation Expression:
	//	BooleanOperation
	//	=> (({ImpliesOperation.left=current} 'implies') right=BooleanOperation)*
	public ImpliesOperationElements getImpliesOperationAccess() {
		return pImpliesOperation;
	}
	
	public ParserRule getImpliesOperationRule() {
		return getImpliesOperationAccess().getRule();
	}
	
	//BooleanOperation Expression:
	//	CompareOperation
	//	=> (({BooleanOrOperation.left=current} 'or' | {BooleanAndOperation.left=current} 'and' |
	//	{BooleanXorOperation.left=current} 'xor') right=CompareOperation)*
	public BooleanOperationElements getBooleanOperationAccess() {
		return pBooleanOperation;
	}
	
	public ParserRule getBooleanOperationRule() {
		return getBooleanOperationAccess().getRule();
	}
	
	//CompareOperation Expression:
	//	EqualityOperation
	//	=> (({CompareLEOperation.left=current} '<=' | {CompareGEOperation.left=current} '>=' |
	//	{CompareNEOperation.left=current} '!=' | {CompareLOperation.left=current} '<' | {CompareGOperation.left=current} '>')
	//	right=EqualityOperation)*
	public CompareOperationElements getCompareOperationAccess() {
		return pCompareOperation;
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//EqualityOperation Expression:
	//	MultOperation
	//	=> ({EqualityOperation.left=current} op='==' right=MultOperation)*
	public EqualityOperationElements getEqualityOperationAccess() {
		return pEqualityOperation;
	}
	
	public ParserRule getEqualityOperationRule() {
		return getEqualityOperationAccess().getRule();
	}
	
	//MultOperation Expression:
	//	AddOperation
	//	=> (({MultOperation.left=current} '*' | {DivOperation.left=current} '/') right=AddOperation)*
	public MultOperationElements getMultOperationAccess() {
		return pMultOperation;
	}
	
	public ParserRule getMultOperationRule() {
		return getMultOperationAccess().getRule();
	}
	
	//AddOperation Expression:
	//	ChaindedCall
	//	=> (({AddOperation.left=current} '+' | {SubOperation.left=current} '-') right=ChaindedCall)*
	public AddOperationElements getAddOperationAccess() {
		return pAddOperation;
	}
	
	public ParserRule getAddOperationRule() {
		return getAddOperationAccess().getRule();
	}
	
	//Symbol:
	//	VarAssign | Field | Param;
	public SymbolElements getSymbolAccess() {
		return pSymbol;
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}
	
	//ChaindedCall Expression:
	//	InfixOperation
	//	=> (({ChainedCall.left=current} '.' | {ChainedCallArrow.left=current} '->') right=InfixOperation)*
	public ChaindedCallElements getChaindedCallAccess() {
		return pChaindedCall;
	}
	
	public ParserRule getChaindedCallRule() {
		return getChaindedCallAccess().getRule();
	}
	
	//InfixOperation Expression:
	//	{NotInfixOperation} 'not' expression=Expression | {NegInfixOperation} '-' expression=Expression |
	//	{ConstructorOperation} 'new' name=ID '(' ')' | {OperationCallOperation} name=ID ('(' (parameters+=ParamCall (','
	//	parameters+=ParamCall)*)? ')') | AtomicLiteral
	public InfixOperationElements getInfixOperationAccess() {
		return pInfixOperation;
	}
	
	public ParserRule getInfixOperationRule() {
		return getInfixOperationAccess().getRule();
	}
	
	//ParamCall:
	//	(lambda=ID '|')? expression=Expression;
	public ParamCallElements getParamCallAccess() {
		return pParamCall;
	}
	
	public ParserRule getParamCallRule() {
		return getParamCallAccess().getRule();
	}
	
	//AtomicLiteral Expression:
	//	'(' Expression ')' | {SelfRef} 'self' | {SuperRef} 'super' | {StringLiteral} value=STRING | {IntLiteral} value=INT |
	//	{RealLiteral} value=REAL | {BooleanLiteral} value=BOOLEAN | {NullLiteral} NULL | {IntRange} '[' start=Expression '.'
	//	'.' stop=Expression ']' | {SequenceDecl} 'Sequence' '{' (expressions+=Expression (',' expressions+=Expression)*)? '}'
	//	| {OrderedSetDecl} 'OrderedSet' '{' (expressions+=Expression (',' expressions+=Expression)*)? '}' | {VarRef} value=ID
	public AtomicLiteralElements getAtomicLiteralAccess() {
		return pAtomicLiteral;
	}
	
	public ParserRule getAtomicLiteralRule() {
		return getAtomicLiteralAccess().getRule();
	}
	
	//Param:
	//	type=Type name=ID;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//Type:
	//	LiteralType | {OutOfScopeType} externalClass=ID | {SequenceType} 'Sequence' '(' subType=Type ')' | {OrderedSetType}
	//	'OrderedSet' '(' subType=Type ')';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//// TODO: Type pipe ?
	////ClassType:
	////	refType=[Class];
	//LiteralType:
	//	lit=('Boolean' |
	//	//	'Byte' | 'Char' | 'Double' | 'Float' | 
	//	//	'Long' | 'Short' |
	//
	//	'Real' |
	//	'Int' |
	//	'String');
	public LiteralTypeElements getLiteralTypeAccess() {
		return pLiteralType;
	}
	
	public ParserRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//Qualified:
	//	ID ('.' ID)*;
	public QualifiedElements getQualifiedAccess() {
		return pQualified;
	}
	
	public ParserRule getQualifiedRule() {
		return getQualifiedAccess().getRule();
	}
	
	//terminal REAL:
	//	'0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal BOOLEAN:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal NULL:
	//	'null';
	public TerminalRule getNULLRule() {
		return tNULL;
	}
	
	//// Type system
	//TypeSystem:
	//	{BooleanTypeT} 'Boolean' | {RealTypeT} 'Real' | {IntTypeT} 'Int' | {StringTypeT} 'String' | {NullTypeT} 'nulltype' |
	//	{SequenceTypeT} 'Sequence' subType=TypeSystem | {ClassTypeT} 'class' clazz=[AleClass];
	public TypeSystemElements getTypeSystemAccess() {
		return pTypeSystem;
	}
	
	public ParserRule getTypeSystemRule() {
		return getTypeSystemAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
