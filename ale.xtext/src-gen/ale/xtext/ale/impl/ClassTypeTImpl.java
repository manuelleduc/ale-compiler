/**
 * generated by Xtext 2.10.0
 */
package ale.xtext.ale.impl;

import ale.xtext.ale.AleClass;
import ale.xtext.ale.AlePackage;
import ale.xtext.ale.ClassTypeT;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Class Type T</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ale.xtext.ale.impl.ClassTypeTImpl#getClazz <em>Clazz</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClassTypeTImpl extends TypeSystemImpl implements ClassTypeT
{
  /**
   * The cached value of the '{@link #getClazz() <em>Clazz</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClazz()
   * @generated
   * @ordered
   */
  protected AleClass clazz;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassTypeTImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AlePackage.Literals.CLASS_TYPE_T;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleClass getClazz()
  {
    if (clazz != null && clazz.eIsProxy())
    {
      InternalEObject oldClazz = (InternalEObject)clazz;
      clazz = (AleClass)eResolveProxy(oldClazz);
      if (clazz != oldClazz)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AlePackage.CLASS_TYPE_T__CLAZZ, oldClazz, clazz));
      }
    }
    return clazz;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleClass basicGetClazz()
  {
    return clazz;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClazz(AleClass newClazz)
  {
    AleClass oldClazz = clazz;
    clazz = newClazz;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlePackage.CLASS_TYPE_T__CLAZZ, oldClazz, clazz));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AlePackage.CLASS_TYPE_T__CLAZZ:
        if (resolve) return getClazz();
        return basicGetClazz();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AlePackage.CLASS_TYPE_T__CLAZZ:
        setClazz((AleClass)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AlePackage.CLASS_TYPE_T__CLAZZ:
        setClazz((AleClass)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AlePackage.CLASS_TYPE_T__CLAZZ:
        return clazz != null;
    }
    return super.eIsSet(featureID);
  }

} //ClassTypeTImpl
