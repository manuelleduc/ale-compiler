/**
 * generated by Xtext 2.10.0
 */
package ale.xtext.ale.util;

import ale.xtext.ale.AddOperation;
import ale.xtext.ale.AlePackage;
import ale.xtext.ale.Block;
import ale.xtext.ale.BooleanAndOperation;
import ale.xtext.ale.BooleanLiteral;
import ale.xtext.ale.BooleanOrOperation;
import ale.xtext.ale.BooleanTypeT;
import ale.xtext.ale.BooleanXorOperation;
import ale.xtext.ale.ChainedCall;
import ale.xtext.ale.ChainedCallArrow;
import ale.xtext.ale.CompareGEOperation;
import ale.xtext.ale.CompareGOperation;
import ale.xtext.ale.CompareLEOperation;
import ale.xtext.ale.CompareLOperation;
import ale.xtext.ale.CompareNEOperation;
import ale.xtext.ale.ConstructorOperation;
import ale.xtext.ale.DefMethod;
import ale.xtext.ale.DivOperation;
import ale.xtext.ale.EqualityOperation;
import ale.xtext.ale.Expression;
import ale.xtext.ale.Field;
import ale.xtext.ale.ForLoop;
import ale.xtext.ale.IfStatement;
import ale.xtext.ale.ImpliesOperation;
import ale.xtext.ale.Import;
import ale.xtext.ale.IntLiteral;
import ale.xtext.ale.IntRange;
import ale.xtext.ale.IntTypeT;
import ale.xtext.ale.LetStatement;
import ale.xtext.ale.LiteralType;
import ale.xtext.ale.Method;
import ale.xtext.ale.MultOperation;
import ale.xtext.ale.NegInfixOperation;
import ale.xtext.ale.NewClass;
import ale.xtext.ale.NotInfixOperation;
import ale.xtext.ale.NullLiteral;
import ale.xtext.ale.NullTypeT;
import ale.xtext.ale.OpenClass;
import ale.xtext.ale.OperationCallOperation;
import ale.xtext.ale.OrderedSetDecl;
import ale.xtext.ale.OrderedSetType;
import ale.xtext.ale.OutOfScopeType;
import ale.xtext.ale.OverrideMethod;
import ale.xtext.ale.Param;
import ale.xtext.ale.ParamCall;
import ale.xtext.ale.RealLiteral;
import ale.xtext.ale.RealTypeT;
import ale.xtext.ale.ReturnStatement;
import ale.xtext.ale.Root;
import ale.xtext.ale.SelfRef;
import ale.xtext.ale.SequenceDecl;
import ale.xtext.ale.SequenceType;
import ale.xtext.ale.SequenceTypeT;
import ale.xtext.ale.Statement;
import ale.xtext.ale.StringLiteral;
import ale.xtext.ale.StringTypeT;
import ale.xtext.ale.SubOperation;
import ale.xtext.ale.SuperRef;
import ale.xtext.ale.Symbol;
import ale.xtext.ale.Type;
import ale.xtext.ale.TypeSystem;
import ale.xtext.ale.VarAssign;
import ale.xtext.ale.VarRef;
import ale.xtext.ale.WhileStatement;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see ale.xtext.ale.AlePackage
 * @generated
 */
public class AleSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AlePackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AlePackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AlePackage.ROOT:
      {
        Root root = (Root)theEObject;
        T result = caseRoot(root);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.CLASS:
      {
        ale.xtext.ale.Class class_ = (ale.xtext.ale.Class)theEObject;
        T result = caseClass(class_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.FIELD:
      {
        Field field = (Field)theEObject;
        T result = caseField(field);
        if (result == null) result = caseSymbol(field);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.METHOD:
      {
        Method method = (Method)theEObject;
        T result = caseMethod(method);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.DEF_METHOD:
      {
        DefMethod defMethod = (DefMethod)theEObject;
        T result = caseDefMethod(defMethod);
        if (result == null) result = caseMethod(defMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.OVERRIDE_METHOD:
      {
        OverrideMethod overrideMethod = (OverrideMethod)theEObject;
        T result = caseOverrideMethod(overrideMethod);
        if (result == null) result = caseMethod(overrideMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = caseSymbol(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.BLOCK:
      {
        Block block = (Block)theEObject;
        T result = caseBlock(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseStatement(expression);
        if (result == null) result = caseSymbol(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.SYMBOL:
      {
        Symbol symbol = (Symbol)theEObject;
        T result = caseSymbol(symbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.PARAM_CALL:
      {
        ParamCall paramCall = (ParamCall)theEObject;
        T result = caseParamCall(paramCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.PARAM:
      {
        Param param = (Param)theEObject;
        T result = caseParam(param);
        if (result == null) result = caseSymbol(param);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.LITERAL_TYPE:
      {
        LiteralType literalType = (LiteralType)theEObject;
        T result = caseLiteralType(literalType);
        if (result == null) result = caseType(literalType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.TYPE_SYSTEM:
      {
        TypeSystem typeSystem = (TypeSystem)theEObject;
        T result = caseTypeSystem(typeSystem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.OPEN_CLASS:
      {
        OpenClass openClass = (OpenClass)theEObject;
        T result = caseOpenClass(openClass);
        if (result == null) result = caseClass(openClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.NEW_CLASS:
      {
        NewClass newClass = (NewClass)theEObject;
        T result = caseNewClass(newClass);
        if (result == null) result = caseClass(newClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.RETURN_STATEMENT:
      {
        ReturnStatement returnStatement = (ReturnStatement)theEObject;
        T result = caseReturnStatement(returnStatement);
        if (result == null) result = caseStatement(returnStatement);
        if (result == null) result = caseSymbol(returnStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.LET_STATEMENT:
      {
        LetStatement letStatement = (LetStatement)theEObject;
        T result = caseLetStatement(letStatement);
        if (result == null) result = caseStatement(letStatement);
        if (result == null) result = caseSymbol(letStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.IF_STATEMENT:
      {
        IfStatement ifStatement = (IfStatement)theEObject;
        T result = caseIfStatement(ifStatement);
        if (result == null) result = caseStatement(ifStatement);
        if (result == null) result = caseSymbol(ifStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.WHILE_STATEMENT:
      {
        WhileStatement whileStatement = (WhileStatement)theEObject;
        T result = caseWhileStatement(whileStatement);
        if (result == null) result = caseStatement(whileStatement);
        if (result == null) result = caseSymbol(whileStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.FOR_LOOP:
      {
        ForLoop forLoop = (ForLoop)theEObject;
        T result = caseForLoop(forLoop);
        if (result == null) result = caseStatement(forLoop);
        if (result == null) result = caseSymbol(forLoop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.VAR_ASSIGN:
      {
        VarAssign varAssign = (VarAssign)theEObject;
        T result = caseVarAssign(varAssign);
        if (result == null) result = caseStatement(varAssign);
        if (result == null) result = caseSymbol(varAssign);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.CHAINED_CALL:
      {
        ChainedCall chainedCall = (ChainedCall)theEObject;
        T result = caseChainedCall(chainedCall);
        if (result == null) result = caseExpression(chainedCall);
        if (result == null) result = caseStatement(chainedCall);
        if (result == null) result = caseSymbol(chainedCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.CHAINED_CALL_ARROW:
      {
        ChainedCallArrow chainedCallArrow = (ChainedCallArrow)theEObject;
        T result = caseChainedCallArrow(chainedCallArrow);
        if (result == null) result = caseExpression(chainedCallArrow);
        if (result == null) result = caseStatement(chainedCallArrow);
        if (result == null) result = caseSymbol(chainedCallArrow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.IMPLIES_OPERATION:
      {
        ImpliesOperation impliesOperation = (ImpliesOperation)theEObject;
        T result = caseImpliesOperation(impliesOperation);
        if (result == null) result = caseExpression(impliesOperation);
        if (result == null) result = caseStatement(impliesOperation);
        if (result == null) result = caseSymbol(impliesOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.BOOLEAN_OR_OPERATION:
      {
        BooleanOrOperation booleanOrOperation = (BooleanOrOperation)theEObject;
        T result = caseBooleanOrOperation(booleanOrOperation);
        if (result == null) result = caseExpression(booleanOrOperation);
        if (result == null) result = caseStatement(booleanOrOperation);
        if (result == null) result = caseSymbol(booleanOrOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.BOOLEAN_AND_OPERATION:
      {
        BooleanAndOperation booleanAndOperation = (BooleanAndOperation)theEObject;
        T result = caseBooleanAndOperation(booleanAndOperation);
        if (result == null) result = caseExpression(booleanAndOperation);
        if (result == null) result = caseStatement(booleanAndOperation);
        if (result == null) result = caseSymbol(booleanAndOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.BOOLEAN_XOR_OPERATION:
      {
        BooleanXorOperation booleanXorOperation = (BooleanXorOperation)theEObject;
        T result = caseBooleanXorOperation(booleanXorOperation);
        if (result == null) result = caseExpression(booleanXorOperation);
        if (result == null) result = caseStatement(booleanXorOperation);
        if (result == null) result = caseSymbol(booleanXorOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.COMPARE_LE_OPERATION:
      {
        CompareLEOperation compareLEOperation = (CompareLEOperation)theEObject;
        T result = caseCompareLEOperation(compareLEOperation);
        if (result == null) result = caseExpression(compareLEOperation);
        if (result == null) result = caseStatement(compareLEOperation);
        if (result == null) result = caseSymbol(compareLEOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.COMPARE_GE_OPERATION:
      {
        CompareGEOperation compareGEOperation = (CompareGEOperation)theEObject;
        T result = caseCompareGEOperation(compareGEOperation);
        if (result == null) result = caseExpression(compareGEOperation);
        if (result == null) result = caseStatement(compareGEOperation);
        if (result == null) result = caseSymbol(compareGEOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.COMPARE_NE_OPERATION:
      {
        CompareNEOperation compareNEOperation = (CompareNEOperation)theEObject;
        T result = caseCompareNEOperation(compareNEOperation);
        if (result == null) result = caseExpression(compareNEOperation);
        if (result == null) result = caseStatement(compareNEOperation);
        if (result == null) result = caseSymbol(compareNEOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.COMPARE_LOPERATION:
      {
        CompareLOperation compareLOperation = (CompareLOperation)theEObject;
        T result = caseCompareLOperation(compareLOperation);
        if (result == null) result = caseExpression(compareLOperation);
        if (result == null) result = caseStatement(compareLOperation);
        if (result == null) result = caseSymbol(compareLOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.COMPARE_GOPERATION:
      {
        CompareGOperation compareGOperation = (CompareGOperation)theEObject;
        T result = caseCompareGOperation(compareGOperation);
        if (result == null) result = caseExpression(compareGOperation);
        if (result == null) result = caseStatement(compareGOperation);
        if (result == null) result = caseSymbol(compareGOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.EQUALITY_OPERATION:
      {
        EqualityOperation equalityOperation = (EqualityOperation)theEObject;
        T result = caseEqualityOperation(equalityOperation);
        if (result == null) result = caseExpression(equalityOperation);
        if (result == null) result = caseStatement(equalityOperation);
        if (result == null) result = caseSymbol(equalityOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.MULT_OPERATION:
      {
        MultOperation multOperation = (MultOperation)theEObject;
        T result = caseMultOperation(multOperation);
        if (result == null) result = caseExpression(multOperation);
        if (result == null) result = caseStatement(multOperation);
        if (result == null) result = caseSymbol(multOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.DIV_OPERATION:
      {
        DivOperation divOperation = (DivOperation)theEObject;
        T result = caseDivOperation(divOperation);
        if (result == null) result = caseExpression(divOperation);
        if (result == null) result = caseStatement(divOperation);
        if (result == null) result = caseSymbol(divOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.ADD_OPERATION:
      {
        AddOperation addOperation = (AddOperation)theEObject;
        T result = caseAddOperation(addOperation);
        if (result == null) result = caseExpression(addOperation);
        if (result == null) result = caseStatement(addOperation);
        if (result == null) result = caseSymbol(addOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.SUB_OPERATION:
      {
        SubOperation subOperation = (SubOperation)theEObject;
        T result = caseSubOperation(subOperation);
        if (result == null) result = caseExpression(subOperation);
        if (result == null) result = caseStatement(subOperation);
        if (result == null) result = caseSymbol(subOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.NOT_INFIX_OPERATION:
      {
        NotInfixOperation notInfixOperation = (NotInfixOperation)theEObject;
        T result = caseNotInfixOperation(notInfixOperation);
        if (result == null) result = caseExpression(notInfixOperation);
        if (result == null) result = caseStatement(notInfixOperation);
        if (result == null) result = caseSymbol(notInfixOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.NEG_INFIX_OPERATION:
      {
        NegInfixOperation negInfixOperation = (NegInfixOperation)theEObject;
        T result = caseNegInfixOperation(negInfixOperation);
        if (result == null) result = caseExpression(negInfixOperation);
        if (result == null) result = caseStatement(negInfixOperation);
        if (result == null) result = caseSymbol(negInfixOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.CONSTRUCTOR_OPERATION:
      {
        ConstructorOperation constructorOperation = (ConstructorOperation)theEObject;
        T result = caseConstructorOperation(constructorOperation);
        if (result == null) result = caseExpression(constructorOperation);
        if (result == null) result = caseStatement(constructorOperation);
        if (result == null) result = caseSymbol(constructorOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.OPERATION_CALL_OPERATION:
      {
        OperationCallOperation operationCallOperation = (OperationCallOperation)theEObject;
        T result = caseOperationCallOperation(operationCallOperation);
        if (result == null) result = caseExpression(operationCallOperation);
        if (result == null) result = caseStatement(operationCallOperation);
        if (result == null) result = caseSymbol(operationCallOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.SELF_REF:
      {
        SelfRef selfRef = (SelfRef)theEObject;
        T result = caseSelfRef(selfRef);
        if (result == null) result = caseExpression(selfRef);
        if (result == null) result = caseStatement(selfRef);
        if (result == null) result = caseSymbol(selfRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.SUPER_REF:
      {
        SuperRef superRef = (SuperRef)theEObject;
        T result = caseSuperRef(superRef);
        if (result == null) result = caseExpression(superRef);
        if (result == null) result = caseStatement(superRef);
        if (result == null) result = caseSymbol(superRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.STRING_LITERAL:
      {
        StringLiteral stringLiteral = (StringLiteral)theEObject;
        T result = caseStringLiteral(stringLiteral);
        if (result == null) result = caseExpression(stringLiteral);
        if (result == null) result = caseStatement(stringLiteral);
        if (result == null) result = caseSymbol(stringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.INT_LITERAL:
      {
        IntLiteral intLiteral = (IntLiteral)theEObject;
        T result = caseIntLiteral(intLiteral);
        if (result == null) result = caseExpression(intLiteral);
        if (result == null) result = caseStatement(intLiteral);
        if (result == null) result = caseSymbol(intLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.REAL_LITERAL:
      {
        RealLiteral realLiteral = (RealLiteral)theEObject;
        T result = caseRealLiteral(realLiteral);
        if (result == null) result = caseExpression(realLiteral);
        if (result == null) result = caseStatement(realLiteral);
        if (result == null) result = caseSymbol(realLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.BOOLEAN_LITERAL:
      {
        BooleanLiteral booleanLiteral = (BooleanLiteral)theEObject;
        T result = caseBooleanLiteral(booleanLiteral);
        if (result == null) result = caseExpression(booleanLiteral);
        if (result == null) result = caseStatement(booleanLiteral);
        if (result == null) result = caseSymbol(booleanLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.NULL_LITERAL:
      {
        NullLiteral nullLiteral = (NullLiteral)theEObject;
        T result = caseNullLiteral(nullLiteral);
        if (result == null) result = caseExpression(nullLiteral);
        if (result == null) result = caseStatement(nullLiteral);
        if (result == null) result = caseSymbol(nullLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.INT_RANGE:
      {
        IntRange intRange = (IntRange)theEObject;
        T result = caseIntRange(intRange);
        if (result == null) result = caseExpression(intRange);
        if (result == null) result = caseStatement(intRange);
        if (result == null) result = caseSymbol(intRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.SEQUENCE_DECL:
      {
        SequenceDecl sequenceDecl = (SequenceDecl)theEObject;
        T result = caseSequenceDecl(sequenceDecl);
        if (result == null) result = caseExpression(sequenceDecl);
        if (result == null) result = caseStatement(sequenceDecl);
        if (result == null) result = caseSymbol(sequenceDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.ORDERED_SET_DECL:
      {
        OrderedSetDecl orderedSetDecl = (OrderedSetDecl)theEObject;
        T result = caseOrderedSetDecl(orderedSetDecl);
        if (result == null) result = caseExpression(orderedSetDecl);
        if (result == null) result = caseStatement(orderedSetDecl);
        if (result == null) result = caseSymbol(orderedSetDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.VAR_REF:
      {
        VarRef varRef = (VarRef)theEObject;
        T result = caseVarRef(varRef);
        if (result == null) result = caseExpression(varRef);
        if (result == null) result = caseStatement(varRef);
        if (result == null) result = caseSymbol(varRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.OUT_OF_SCOPE_TYPE:
      {
        OutOfScopeType outOfScopeType = (OutOfScopeType)theEObject;
        T result = caseOutOfScopeType(outOfScopeType);
        if (result == null) result = caseType(outOfScopeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.SEQUENCE_TYPE:
      {
        SequenceType sequenceType = (SequenceType)theEObject;
        T result = caseSequenceType(sequenceType);
        if (result == null) result = caseType(sequenceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.ORDERED_SET_TYPE:
      {
        OrderedSetType orderedSetType = (OrderedSetType)theEObject;
        T result = caseOrderedSetType(orderedSetType);
        if (result == null) result = caseType(orderedSetType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.BOOLEAN_TYPE_T:
      {
        BooleanTypeT booleanTypeT = (BooleanTypeT)theEObject;
        T result = caseBooleanTypeT(booleanTypeT);
        if (result == null) result = caseTypeSystem(booleanTypeT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.REAL_TYPE_T:
      {
        RealTypeT realTypeT = (RealTypeT)theEObject;
        T result = caseRealTypeT(realTypeT);
        if (result == null) result = caseTypeSystem(realTypeT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.INT_TYPE_T:
      {
        IntTypeT intTypeT = (IntTypeT)theEObject;
        T result = caseIntTypeT(intTypeT);
        if (result == null) result = caseTypeSystem(intTypeT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.STRING_TYPE_T:
      {
        StringTypeT stringTypeT = (StringTypeT)theEObject;
        T result = caseStringTypeT(stringTypeT);
        if (result == null) result = caseTypeSystem(stringTypeT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.NULL_TYPE_T:
      {
        NullTypeT nullTypeT = (NullTypeT)theEObject;
        T result = caseNullTypeT(nullTypeT);
        if (result == null) result = caseTypeSystem(nullTypeT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlePackage.SEQUENCE_TYPE_T:
      {
        SequenceTypeT sequenceTypeT = (SequenceTypeT)theEObject;
        T result = caseSequenceTypeT(sequenceTypeT);
        if (result == null) result = caseTypeSystem(sequenceTypeT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoot(Root object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClass(ale.xtext.ale.Class object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseField(Field object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethod(Method object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Def Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Def Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefMethod(DefMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Override Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Override Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOverrideMethod(OverrideMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlock(Block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSymbol(Symbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Param Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Param Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParamCall(ParamCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Param</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Param</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParam(Param object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteralType(LiteralType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type System</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type System</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeSystem(TypeSystem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Open Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Open Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpenClass(OpenClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>New Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>New Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNewClass(NewClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnStatement(ReturnStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetStatement(LetStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfStatement(IfStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>While Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>While Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhileStatement(WhileStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Loop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Loop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForLoop(ForLoop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Assign</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Assign</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarAssign(VarAssign object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chained Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chained Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChainedCall(ChainedCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chained Call Arrow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chained Call Arrow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChainedCallArrow(ChainedCallArrow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Implies Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Implies Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImpliesOperation(ImpliesOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Or Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Or Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanOrOperation(BooleanOrOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean And Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean And Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanAndOperation(BooleanAndOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Xor Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Xor Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanXorOperation(BooleanXorOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare LE Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare LE Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompareLEOperation(CompareLEOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare GE Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare GE Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompareGEOperation(CompareGEOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare NE Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare NE Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompareNEOperation(CompareNEOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare LOperation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare LOperation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompareLOperation(CompareLOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare GOperation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare GOperation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompareGOperation(CompareGOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqualityOperation(EqualityOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mult Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mult Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultOperation(MultOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Div Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Div Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDivOperation(DivOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddOperation(AddOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubOperation(SubOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Infix Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Infix Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotInfixOperation(NotInfixOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Neg Infix Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Neg Infix Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegInfixOperation(NegInfixOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constructor Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constructor Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstructorOperation(ConstructorOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation Call Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation Call Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperationCallOperation(OperationCallOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Self Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Self Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelfRef(SelfRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Super Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Super Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSuperRef(SuperRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteral(StringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntLiteral(IntLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealLiteral(RealLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanLiteral(BooleanLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullLiteral(NullLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntRange(IntRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceDecl(SequenceDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Set Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Set Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedSetDecl(OrderedSetDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarRef(VarRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out Of Scope Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out Of Scope Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutOfScopeType(OutOfScopeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceType(SequenceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordered Set Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordered Set Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderedSetType(OrderedSetType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Type T</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Type T</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanTypeT(BooleanTypeT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Type T</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Type T</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealTypeT(RealTypeT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Type T</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Type T</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntTypeT(IntTypeT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Type T</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Type T</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringTypeT(StringTypeT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Type T</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Type T</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullTypeT(NullTypeT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Type T</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Type T</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceTypeT(SequenceTypeT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AleSwitch
