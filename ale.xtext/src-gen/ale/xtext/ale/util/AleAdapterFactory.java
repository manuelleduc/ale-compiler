/**
 * generated by Xtext 2.10.0
 */
package ale.xtext.ale.util;

import ale.xtext.ale.AddOperation;
import ale.xtext.ale.AlePackage;
import ale.xtext.ale.Block;
import ale.xtext.ale.BooleanAndOperation;
import ale.xtext.ale.BooleanLiteral;
import ale.xtext.ale.BooleanOrOperation;
import ale.xtext.ale.BooleanTypeT;
import ale.xtext.ale.BooleanXorOperation;
import ale.xtext.ale.ChainedCall;
import ale.xtext.ale.ChainedCallArrow;
import ale.xtext.ale.ClassTypeT;
import ale.xtext.ale.CompareGEOperation;
import ale.xtext.ale.CompareGOperation;
import ale.xtext.ale.CompareLEOperation;
import ale.xtext.ale.CompareLOperation;
import ale.xtext.ale.CompareNEOperation;
import ale.xtext.ale.ConstructorOperation;
import ale.xtext.ale.DefMethod;
import ale.xtext.ale.DivOperation;
import ale.xtext.ale.EqualityOperation;
import ale.xtext.ale.Expression;
import ale.xtext.ale.Field;
import ale.xtext.ale.ForLoop;
import ale.xtext.ale.IfStatement;
import ale.xtext.ale.ImpliesOperation;
import ale.xtext.ale.Import;
import ale.xtext.ale.IntLiteral;
import ale.xtext.ale.IntRange;
import ale.xtext.ale.IntTypeT;
import ale.xtext.ale.LetStatement;
import ale.xtext.ale.LiteralType;
import ale.xtext.ale.Method;
import ale.xtext.ale.MultOperation;
import ale.xtext.ale.NegInfixOperation;
import ale.xtext.ale.NewClass;
import ale.xtext.ale.NotInfixOperation;
import ale.xtext.ale.NullLiteral;
import ale.xtext.ale.NullTypeT;
import ale.xtext.ale.OADenot;
import ale.xtext.ale.OpenClass;
import ale.xtext.ale.OperationCallOperation;
import ale.xtext.ale.OrderedSetDecl;
import ale.xtext.ale.OrderedSetType;
import ale.xtext.ale.OutOfScopeType;
import ale.xtext.ale.OverrideMethod;
import ale.xtext.ale.Param;
import ale.xtext.ale.ParamCall;
import ale.xtext.ale.RealLiteral;
import ale.xtext.ale.RealTypeT;
import ale.xtext.ale.ReturnStatement;
import ale.xtext.ale.Root;
import ale.xtext.ale.SelfRef;
import ale.xtext.ale.SequenceDecl;
import ale.xtext.ale.SequenceType;
import ale.xtext.ale.SequenceTypeT;
import ale.xtext.ale.Statement;
import ale.xtext.ale.StringLiteral;
import ale.xtext.ale.StringTypeT;
import ale.xtext.ale.SubOperation;
import ale.xtext.ale.SuperRef;
import ale.xtext.ale.Symbol;
import ale.xtext.ale.Type;
import ale.xtext.ale.TypeSystem;
import ale.xtext.ale.VarAssign;
import ale.xtext.ale.VarRef;
import ale.xtext.ale.WhileStatement;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see ale.xtext.ale.AlePackage
 * @generated
 */
public class AleAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AlePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AlePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AleSwitch<Adapter> modelSwitch =
    new AleSwitch<Adapter>()
    {
      @Override
      public Adapter caseRoot(Root object)
      {
        return createRootAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseClass(ale.xtext.ale.Class object)
      {
        return createClassAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseMethod(Method object)
      {
        return createMethodAdapter();
      }
      @Override
      public Adapter caseDefMethod(DefMethod object)
      {
        return createDefMethodAdapter();
      }
      @Override
      public Adapter caseOverrideMethod(OverrideMethod object)
      {
        return createOverrideMethodAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseBlock(Block object)
      {
        return createBlockAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseSymbol(Symbol object)
      {
        return createSymbolAdapter();
      }
      @Override
      public Adapter caseParamCall(ParamCall object)
      {
        return createParamCallAdapter();
      }
      @Override
      public Adapter caseParam(Param object)
      {
        return createParamAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseLiteralType(LiteralType object)
      {
        return createLiteralTypeAdapter();
      }
      @Override
      public Adapter caseTypeSystem(TypeSystem object)
      {
        return createTypeSystemAdapter();
      }
      @Override
      public Adapter caseOpenClass(OpenClass object)
      {
        return createOpenClassAdapter();
      }
      @Override
      public Adapter caseNewClass(NewClass object)
      {
        return createNewClassAdapter();
      }
      @Override
      public Adapter caseReturnStatement(ReturnStatement object)
      {
        return createReturnStatementAdapter();
      }
      @Override
      public Adapter caseLetStatement(LetStatement object)
      {
        return createLetStatementAdapter();
      }
      @Override
      public Adapter caseIfStatement(IfStatement object)
      {
        return createIfStatementAdapter();
      }
      @Override
      public Adapter caseWhileStatement(WhileStatement object)
      {
        return createWhileStatementAdapter();
      }
      @Override
      public Adapter caseForLoop(ForLoop object)
      {
        return createForLoopAdapter();
      }
      @Override
      public Adapter caseVarAssign(VarAssign object)
      {
        return createVarAssignAdapter();
      }
      @Override
      public Adapter caseImpliesOperation(ImpliesOperation object)
      {
        return createImpliesOperationAdapter();
      }
      @Override
      public Adapter caseBooleanOrOperation(BooleanOrOperation object)
      {
        return createBooleanOrOperationAdapter();
      }
      @Override
      public Adapter caseBooleanAndOperation(BooleanAndOperation object)
      {
        return createBooleanAndOperationAdapter();
      }
      @Override
      public Adapter caseBooleanXorOperation(BooleanXorOperation object)
      {
        return createBooleanXorOperationAdapter();
      }
      @Override
      public Adapter caseCompareLEOperation(CompareLEOperation object)
      {
        return createCompareLEOperationAdapter();
      }
      @Override
      public Adapter caseCompareGEOperation(CompareGEOperation object)
      {
        return createCompareGEOperationAdapter();
      }
      @Override
      public Adapter caseCompareNEOperation(CompareNEOperation object)
      {
        return createCompareNEOperationAdapter();
      }
      @Override
      public Adapter caseCompareLOperation(CompareLOperation object)
      {
        return createCompareLOperationAdapter();
      }
      @Override
      public Adapter caseCompareGOperation(CompareGOperation object)
      {
        return createCompareGOperationAdapter();
      }
      @Override
      public Adapter caseEqualityOperation(EqualityOperation object)
      {
        return createEqualityOperationAdapter();
      }
      @Override
      public Adapter caseMultOperation(MultOperation object)
      {
        return createMultOperationAdapter();
      }
      @Override
      public Adapter caseDivOperation(DivOperation object)
      {
        return createDivOperationAdapter();
      }
      @Override
      public Adapter caseAddOperation(AddOperation object)
      {
        return createAddOperationAdapter();
      }
      @Override
      public Adapter caseSubOperation(SubOperation object)
      {
        return createSubOperationAdapter();
      }
      @Override
      public Adapter caseChainedCall(ChainedCall object)
      {
        return createChainedCallAdapter();
      }
      @Override
      public Adapter caseChainedCallArrow(ChainedCallArrow object)
      {
        return createChainedCallArrowAdapter();
      }
      @Override
      public Adapter caseNotInfixOperation(NotInfixOperation object)
      {
        return createNotInfixOperationAdapter();
      }
      @Override
      public Adapter caseNegInfixOperation(NegInfixOperation object)
      {
        return createNegInfixOperationAdapter();
      }
      @Override
      public Adapter caseConstructorOperation(ConstructorOperation object)
      {
        return createConstructorOperationAdapter();
      }
      @Override
      public Adapter caseOperationCallOperation(OperationCallOperation object)
      {
        return createOperationCallOperationAdapter();
      }
      @Override
      public Adapter caseOADenot(OADenot object)
      {
        return createOADenotAdapter();
      }
      @Override
      public Adapter caseSelfRef(SelfRef object)
      {
        return createSelfRefAdapter();
      }
      @Override
      public Adapter caseSuperRef(SuperRef object)
      {
        return createSuperRefAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseIntLiteral(IntLiteral object)
      {
        return createIntLiteralAdapter();
      }
      @Override
      public Adapter caseRealLiteral(RealLiteral object)
      {
        return createRealLiteralAdapter();
      }
      @Override
      public Adapter caseBooleanLiteral(BooleanLiteral object)
      {
        return createBooleanLiteralAdapter();
      }
      @Override
      public Adapter caseNullLiteral(NullLiteral object)
      {
        return createNullLiteralAdapter();
      }
      @Override
      public Adapter caseIntRange(IntRange object)
      {
        return createIntRangeAdapter();
      }
      @Override
      public Adapter caseSequenceDecl(SequenceDecl object)
      {
        return createSequenceDeclAdapter();
      }
      @Override
      public Adapter caseOrderedSetDecl(OrderedSetDecl object)
      {
        return createOrderedSetDeclAdapter();
      }
      @Override
      public Adapter caseVarRef(VarRef object)
      {
        return createVarRefAdapter();
      }
      @Override
      public Adapter caseOutOfScopeType(OutOfScopeType object)
      {
        return createOutOfScopeTypeAdapter();
      }
      @Override
      public Adapter caseSequenceType(SequenceType object)
      {
        return createSequenceTypeAdapter();
      }
      @Override
      public Adapter caseOrderedSetType(OrderedSetType object)
      {
        return createOrderedSetTypeAdapter();
      }
      @Override
      public Adapter caseBooleanTypeT(BooleanTypeT object)
      {
        return createBooleanTypeTAdapter();
      }
      @Override
      public Adapter caseRealTypeT(RealTypeT object)
      {
        return createRealTypeTAdapter();
      }
      @Override
      public Adapter caseIntTypeT(IntTypeT object)
      {
        return createIntTypeTAdapter();
      }
      @Override
      public Adapter caseStringTypeT(StringTypeT object)
      {
        return createStringTypeTAdapter();
      }
      @Override
      public Adapter caseNullTypeT(NullTypeT object)
      {
        return createNullTypeTAdapter();
      }
      @Override
      public Adapter caseSequenceTypeT(SequenceTypeT object)
      {
        return createSequenceTypeTAdapter();
      }
      @Override
      public Adapter caseClassTypeT(ClassTypeT object)
      {
        return createClassTypeTAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Root <em>Root</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Root
   * @generated
   */
  public Adapter createRootAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Class <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Class
   * @generated
   */
  public Adapter createClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Method <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Method
   * @generated
   */
  public Adapter createMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.DefMethod <em>Def Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.DefMethod
   * @generated
   */
  public Adapter createDefMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.OverrideMethod <em>Override Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.OverrideMethod
   * @generated
   */
  public Adapter createOverrideMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Block <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Block
   * @generated
   */
  public Adapter createBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Symbol <em>Symbol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Symbol
   * @generated
   */
  public Adapter createSymbolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.ParamCall <em>Param Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.ParamCall
   * @generated
   */
  public Adapter createParamCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Param <em>Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Param
   * @generated
   */
  public Adapter createParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.LiteralType <em>Literal Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.LiteralType
   * @generated
   */
  public Adapter createLiteralTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.TypeSystem <em>Type System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.TypeSystem
   * @generated
   */
  public Adapter createTypeSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.OpenClass <em>Open Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.OpenClass
   * @generated
   */
  public Adapter createOpenClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.NewClass <em>New Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.NewClass
   * @generated
   */
  public Adapter createNewClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.ReturnStatement <em>Return Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.ReturnStatement
   * @generated
   */
  public Adapter createReturnStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.LetStatement <em>Let Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.LetStatement
   * @generated
   */
  public Adapter createLetStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.IfStatement <em>If Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.IfStatement
   * @generated
   */
  public Adapter createIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.WhileStatement <em>While Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.WhileStatement
   * @generated
   */
  public Adapter createWhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.ForLoop <em>For Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.ForLoop
   * @generated
   */
  public Adapter createForLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.VarAssign <em>Var Assign</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.VarAssign
   * @generated
   */
  public Adapter createVarAssignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.ImpliesOperation <em>Implies Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.ImpliesOperation
   * @generated
   */
  public Adapter createImpliesOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.BooleanOrOperation <em>Boolean Or Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.BooleanOrOperation
   * @generated
   */
  public Adapter createBooleanOrOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.BooleanAndOperation <em>Boolean And Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.BooleanAndOperation
   * @generated
   */
  public Adapter createBooleanAndOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.BooleanXorOperation <em>Boolean Xor Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.BooleanXorOperation
   * @generated
   */
  public Adapter createBooleanXorOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.CompareLEOperation <em>Compare LE Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.CompareLEOperation
   * @generated
   */
  public Adapter createCompareLEOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.CompareGEOperation <em>Compare GE Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.CompareGEOperation
   * @generated
   */
  public Adapter createCompareGEOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.CompareNEOperation <em>Compare NE Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.CompareNEOperation
   * @generated
   */
  public Adapter createCompareNEOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.CompareLOperation <em>Compare LOperation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.CompareLOperation
   * @generated
   */
  public Adapter createCompareLOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.CompareGOperation <em>Compare GOperation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.CompareGOperation
   * @generated
   */
  public Adapter createCompareGOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.EqualityOperation <em>Equality Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.EqualityOperation
   * @generated
   */
  public Adapter createEqualityOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.MultOperation <em>Mult Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.MultOperation
   * @generated
   */
  public Adapter createMultOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.DivOperation <em>Div Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.DivOperation
   * @generated
   */
  public Adapter createDivOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.AddOperation <em>Add Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.AddOperation
   * @generated
   */
  public Adapter createAddOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.SubOperation <em>Sub Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.SubOperation
   * @generated
   */
  public Adapter createSubOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.ChainedCall <em>Chained Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.ChainedCall
   * @generated
   */
  public Adapter createChainedCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.ChainedCallArrow <em>Chained Call Arrow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.ChainedCallArrow
   * @generated
   */
  public Adapter createChainedCallArrowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.NotInfixOperation <em>Not Infix Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.NotInfixOperation
   * @generated
   */
  public Adapter createNotInfixOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.NegInfixOperation <em>Neg Infix Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.NegInfixOperation
   * @generated
   */
  public Adapter createNegInfixOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.ConstructorOperation <em>Constructor Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.ConstructorOperation
   * @generated
   */
  public Adapter createConstructorOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.OperationCallOperation <em>Operation Call Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.OperationCallOperation
   * @generated
   */
  public Adapter createOperationCallOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.OADenot <em>OA Denot</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.OADenot
   * @generated
   */
  public Adapter createOADenotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.SelfRef <em>Self Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.SelfRef
   * @generated
   */
  public Adapter createSelfRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.SuperRef <em>Super Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.SuperRef
   * @generated
   */
  public Adapter createSuperRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.IntLiteral <em>Int Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.IntLiteral
   * @generated
   */
  public Adapter createIntLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.RealLiteral <em>Real Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.RealLiteral
   * @generated
   */
  public Adapter createRealLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.BooleanLiteral <em>Boolean Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.BooleanLiteral
   * @generated
   */
  public Adapter createBooleanLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.NullLiteral <em>Null Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.NullLiteral
   * @generated
   */
  public Adapter createNullLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.IntRange <em>Int Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.IntRange
   * @generated
   */
  public Adapter createIntRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.SequenceDecl <em>Sequence Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.SequenceDecl
   * @generated
   */
  public Adapter createSequenceDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.OrderedSetDecl <em>Ordered Set Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.OrderedSetDecl
   * @generated
   */
  public Adapter createOrderedSetDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.VarRef <em>Var Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.VarRef
   * @generated
   */
  public Adapter createVarRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.OutOfScopeType <em>Out Of Scope Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.OutOfScopeType
   * @generated
   */
  public Adapter createOutOfScopeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.SequenceType <em>Sequence Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.SequenceType
   * @generated
   */
  public Adapter createSequenceTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.OrderedSetType <em>Ordered Set Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.OrderedSetType
   * @generated
   */
  public Adapter createOrderedSetTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.BooleanTypeT <em>Boolean Type T</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.BooleanTypeT
   * @generated
   */
  public Adapter createBooleanTypeTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.RealTypeT <em>Real Type T</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.RealTypeT
   * @generated
   */
  public Adapter createRealTypeTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.IntTypeT <em>Int Type T</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.IntTypeT
   * @generated
   */
  public Adapter createIntTypeTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.StringTypeT <em>String Type T</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.StringTypeT
   * @generated
   */
  public Adapter createStringTypeTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.NullTypeT <em>Null Type T</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.NullTypeT
   * @generated
   */
  public Adapter createNullTypeTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.SequenceTypeT <em>Sequence Type T</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.SequenceTypeT
   * @generated
   */
  public Adapter createSequenceTypeTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ale.xtext.ale.ClassTypeT <em>Class Type T</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ale.xtext.ale.ClassTypeT
   * @generated
   */
  public Adapter createClassTypeTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AleAdapterFactory
