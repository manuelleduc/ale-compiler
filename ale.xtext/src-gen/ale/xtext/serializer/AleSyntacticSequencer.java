/*
 * generated by Xtext 2.10.0
 */
package ale.xtext.serializer;

import ale.xtext.services.AleGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class AleSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AleGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AtomicLiteral_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_AtomicLiteral_LeftParenthesisKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AleGrammarAccess) access;
		match_AtomicLiteral_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getAtomicLiteralAccess().getLeftParenthesisKeyword_0_0());
		match_AtomicLiteral_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getAtomicLiteralAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getNULLRule())
			return getNULLToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal NULL:
	 * 	'null';
	 */
	protected String getNULLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "null";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AtomicLiteral_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_AtomicLiteral_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AtomicLiteral_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_AtomicLiteral_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '-' expression=Expression
	 *     (rule start) (ambiguity) 'OrderedSet' '{' '}' ';' (rule start)
	 *     (rule start) (ambiguity) 'OrderedSet' '{' '}' (rule start)
	 *     (rule start) (ambiguity) 'OrderedSet' '{' expressions+=Expression
	 *     (rule start) (ambiguity) 'Sequence' '{' '}' ';' (rule start)
	 *     (rule start) (ambiguity) 'Sequence' '{' '}' (rule start)
	 *     (rule start) (ambiguity) 'Sequence' '{' expressions+=Expression
	 *     (rule start) (ambiguity) '[' start=Expression
	 *     (rule start) (ambiguity) 'new' name=ID
	 *     (rule start) (ambiguity) 'not' expression=Expression
	 *     (rule start) (ambiguity) 'self' ';' (rule start)
	 *     (rule start) (ambiguity) 'self' (rule start)
	 *     (rule start) (ambiguity) 'super' ';' (rule start)
	 *     (rule start) (ambiguity) 'super' (rule start)
	 *     (rule start) (ambiguity) NULL ';' (rule start)
	 *     (rule start) (ambiguity) NULL (rule start)
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) value=BOOLEAN
	 *     (rule start) (ambiguity) value=ID
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=REAL
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {AddOperation.left=}
	 *     (rule start) (ambiguity) {BooleanAndOperation.left=}
	 *     (rule start) (ambiguity) {BooleanOrOperation.left=}
	 *     (rule start) (ambiguity) {BooleanXorOperation.left=}
	 *     (rule start) (ambiguity) {ChainedCall.left=}
	 *     (rule start) (ambiguity) {ChainedCallArrow.left=}
	 *     (rule start) (ambiguity) {CompareGEOperation.left=}
	 *     (rule start) (ambiguity) {CompareGOperation.left=}
	 *     (rule start) (ambiguity) {CompareLEOperation.left=}
	 *     (rule start) (ambiguity) {CompareLOperation.left=}
	 *     (rule start) (ambiguity) {CompareNEOperation.left=}
	 *     (rule start) (ambiguity) {DivOperation.left=}
	 *     (rule start) (ambiguity) {EqualityOperation.left=}
	 *     (rule start) (ambiguity) {ImpliesOperation.left=}
	 *     (rule start) (ambiguity) {MultOperation.left=}
	 *     (rule start) (ambiguity) {SubOperation.left=}
	 */
	protected void emit_AtomicLiteral_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '-' expression=Expression
	 *     (rule start) (ambiguity) 'new' name=ID
	 *     (rule start) (ambiguity) 'not' expression=Expression
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) {AddOperation.left=}
	 *     (rule start) (ambiguity) {BooleanAndOperation.left=}
	 *     (rule start) (ambiguity) {BooleanOrOperation.left=}
	 *     (rule start) (ambiguity) {BooleanXorOperation.left=}
	 *     (rule start) (ambiguity) {ChainedCall.left=}
	 *     (rule start) (ambiguity) {ChainedCallArrow.left=}
	 *     (rule start) (ambiguity) {CompareGEOperation.left=}
	 *     (rule start) (ambiguity) {CompareGOperation.left=}
	 *     (rule start) (ambiguity) {CompareLEOperation.left=}
	 *     (rule start) (ambiguity) {CompareLOperation.left=}
	 *     (rule start) (ambiguity) {CompareNEOperation.left=}
	 *     (rule start) (ambiguity) {DivOperation.left=}
	 *     (rule start) (ambiguity) {EqualityOperation.left=}
	 *     (rule start) (ambiguity) {ImpliesOperation.left=}
	 *     (rule start) (ambiguity) {MultOperation.left=}
	 *     (rule start) (ambiguity) {SubOperation.left=}
	 */
	protected void emit_AtomicLiteral_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
