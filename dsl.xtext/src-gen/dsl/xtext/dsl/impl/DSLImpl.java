/**
 * generated by Xtext 2.10.0
 */
package dsl.xtext.dsl.impl;

import dsl.xtext.dsl.Behavior;
import dsl.xtext.dsl.DSL;
import dsl.xtext.dsl.DslPackage;
import dsl.xtext.dsl.Syntax;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>DSL</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dsl.xtext.dsl.impl.DSLImpl#getSyntaxes <em>Syntaxes</em>}</li>
 *   <li>{@link dsl.xtext.dsl.impl.DSLImpl#getBehaviours <em>Behaviours</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DSLImpl extends MinimalEObjectImpl.Container implements DSL
{
  /**
   * The cached value of the '{@link #getSyntaxes() <em>Syntaxes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSyntaxes()
   * @generated
   * @ordered
   */
  protected EList<Syntax> syntaxes;

  /**
   * The cached value of the '{@link #getBehaviours() <em>Behaviours</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehaviours()
   * @generated
   * @ordered
   */
  protected EList<Behavior> behaviours;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DSLImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.DSL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Syntax> getSyntaxes()
  {
    if (syntaxes == null)
    {
      syntaxes = new EObjectContainmentEList<Syntax>(Syntax.class, this, DslPackage.DSL__SYNTAXES);
    }
    return syntaxes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Behavior> getBehaviours()
  {
    if (behaviours == null)
    {
      behaviours = new EObjectContainmentEList<Behavior>(Behavior.class, this, DslPackage.DSL__BEHAVIOURS);
    }
    return behaviours;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.DSL__SYNTAXES:
        return ((InternalEList<?>)getSyntaxes()).basicRemove(otherEnd, msgs);
      case DslPackage.DSL__BEHAVIOURS:
        return ((InternalEList<?>)getBehaviours()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.DSL__SYNTAXES:
        return getSyntaxes();
      case DslPackage.DSL__BEHAVIOURS:
        return getBehaviours();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.DSL__SYNTAXES:
        getSyntaxes().clear();
        getSyntaxes().addAll((Collection<? extends Syntax>)newValue);
        return;
      case DslPackage.DSL__BEHAVIOURS:
        getBehaviours().clear();
        getBehaviours().addAll((Collection<? extends Behavior>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.DSL__SYNTAXES:
        getSyntaxes().clear();
        return;
      case DslPackage.DSL__BEHAVIOURS:
        getBehaviours().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.DSL__SYNTAXES:
        return syntaxes != null && !syntaxes.isEmpty();
      case DslPackage.DSL__BEHAVIOURS:
        return behaviours != null && !behaviours.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DSLImpl
