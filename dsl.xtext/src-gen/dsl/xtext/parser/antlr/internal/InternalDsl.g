/*
 * generated by Xtext 2.10.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package dsl.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dsl.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dsl.xtext.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DSL";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDSL
entryRuleDSL returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDSLRule()); }
	iv_ruleDSL=ruleDSL
	{ $current=$iv_ruleDSL.current; }
	EOF;

// Rule DSL
ruleDSL returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='syntax'
		{
			newLeafNode(otherlv_0, grammarAccess.getDSLAccess().getSyntaxKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getDSLAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDSLAccess().getSyntaxesSyntaxParserRuleCall_2_0());
				}
				lv_syntaxes_2_0=ruleSyntax
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDSLRule());
					}
					add(
						$current,
						"syntaxes",
						lv_syntaxes_2_0,
						"dsl.xtext.Dsl.Syntax");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getDSLAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLAccess().getSyntaxesSyntaxParserRuleCall_3_1_0());
					}
					lv_syntaxes_4_0=ruleSyntax
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLRule());
						}
						add(
							$current,
							"syntaxes",
							lv_syntaxes_4_0,
							"dsl.xtext.Dsl.Syntax");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='behavior'
		{
			newLeafNode(otherlv_5, grammarAccess.getDSLAccess().getBehaviorKeyword_4());
		}
		otherlv_6='='
		{
			newLeafNode(otherlv_6, grammarAccess.getDSLAccess().getEqualsSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDSLAccess().getBehavioursBehaviorParserRuleCall_6_0());
				}
				lv_behaviours_7_0=ruleBehavior
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDSLRule());
					}
					add(
						$current,
						"behaviours",
						lv_behaviours_7_0,
						"dsl.xtext.Dsl.Behavior");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getDSLAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDSLAccess().getBehavioursBehaviorParserRuleCall_7_1_0());
					}
					lv_behaviours_9_0=ruleBehavior
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDSLRule());
						}
						add(
							$current,
							"behaviours",
							lv_behaviours_9_0,
							"dsl.xtext.Dsl.Behavior");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSyntax
entryRuleSyntax returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSyntaxRule()); }
	iv_ruleSyntax=ruleSyntax
	{ $current=$iv_ruleSyntax.current; }
	EOF;

// Rule Syntax
ruleSyntax returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getSyntaxAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSyntaxRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleBehavior
entryRuleBehavior returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBehaviorRule()); }
	iv_ruleBehavior=ruleBehavior
	{ $current=$iv_ruleBehavior.current; }
	EOF;

// Rule Behavior
ruleBehavior returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getBehaviorAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBehaviorRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
